{"version":3,"sources":["routes/reward.js"],"names":["Reward","React","Component","constructor","props","context","super","intendWithdraw","this","gateway","post","eth_addr","currentUser","then","message","success","catch","err","console","error","redeemReward","get","res","contracts","SGN","methods","cacheSend","data","result","renderActions","type","onClick","accounts","setting","network","drizzle","state","redeemedServiceReward","cacheCall","DPoS","redeemedMiningReward","axios","create","baseURL","timeout","setState","miningReward","mining_reward","serviceReward","service_reward","response","warning","render","_","isEmpty","title","actions","style","marginTop","span","value","formatCelrValue","values","contextTypes","PropTypes","object","drizzleConnect"],"mappings":"8RASA,MAAMA,UAAeC,IAAMC,UACzBC,YAAYC,EAAOC,GACjBC,MAAMF,GADoB,KAwC5BG,eAAiB,KACfC,KAAKC,QACFC,KAAK,4BAA6B,CACjCC,SAAUH,KAAKI,cAEhBC,KAAK,KACJC,IAAQC,QAAQ,2DAEjBC,MAAOC,IACNC,QAAQC,MAAMF,MAjDQ,KAqD5BG,aAAe,KACbZ,KAAKC,QACFY,IADH,mCACmCb,KAAKI,cACrCC,KAAMS,IACLd,KAAKe,UAAUC,IAAIC,QAAQL,aAAaM,UAAU,KAAOJ,EAAIK,KAAKC,UAEnEZ,MAAOC,IACNC,QAAQC,MAAMF,MA5DQ,KAgE5BY,cAAgB,IACP,CACL,kBAAC,IAAD,CAAQC,KAAK,UAAUC,QAASvB,KAAKD,gBAArC,qBAGA,kBAAC,IAAD,CAAQuB,KAAK,UAAUC,QAASvB,KAAKY,cAArC,kBArEwB,IAIxBY,EAEE5B,EAFF4B,SACWC,EACT7B,EADF8B,QAAWD,QAEbzB,KAAKI,YAAcoB,EAAS,GAC5BxB,KAAKe,UAAYlB,EAAQ8B,QAAQZ,UACjCf,KAAK4B,MAAQ,GAEb5B,KAAKe,UAAUC,IAAIC,QAAQY,sBAAsBC,UAAU9B,KAAKI,aAChEJ,KAAKe,UAAUgB,KAAKd,QAAQe,qBAAqBF,UAAU9B,KAAKI,aAEhEJ,KAAKC,QAAUgC,IAAMC,OAAO,CAC1BC,QAASV,EAAQxB,QACjBmC,QAAS,MAGXpC,KAAKC,QACFY,IADH,4BAC4Bb,KAAKI,cAC9BC,KAAMS,IAAS,IACNM,EAAWN,EAAIK,KAAfC,OACRpB,KAAKqC,SAAS,CACZC,aAAclB,EAAOmB,cACrBC,cAAepB,EAAOqB,mBAGzBjC,MAAOC,IACNC,QAAQC,MAAMF,GAEVA,EAAIiC,SACNpC,IAAQK,MAAMF,EAAIiC,SAASvB,KAAKR,OAIlCL,IAAQqC,QAAQ,uEAuCtBC,SAAU,IAAD,EACe5C,KAAKJ,MAAnBmC,EADD,EACCA,KAAMf,EADP,EACOA,IADP,EAEiChB,KAAK4B,MAArCU,EAFD,EAECA,aAAcE,EAFf,EAEeA,cACdR,EAAyBD,EAAzBC,qBACAH,EAA0Bb,EAA1Ba,sBAER,OAAIgB,IAAEC,QAAQjB,IAA0BgB,IAAEC,QAAQd,GACzC,kBAAC,IAAD,MAIP,kBAAC,IAAD,CAAMe,MAAM,SAASC,QAAShD,KAAKqB,iBACjC,kBAAC,IAAD,CAAK4B,MAAO,CAAEC,UAAW,SACvB,kBAAC,IAAD,CAAKC,KAAM,IACT,kBAAC,IAAD,CACEJ,MAAM,2BACNK,MAAOC,YAAgBf,GAAc,MAGzC,kBAAC,IAAD,CAAKa,KAAM,IACT,kBAAC,IAAD,CACEJ,MAAM,4BACNK,MAAOC,YAAgBb,GAAe,MAG1C,kBAAC,IAAD,CAAKW,KAAM,IACT,kBAAC,IAAD,CACEJ,MAAM,yBACNK,MAAOC,YAAgBR,IAAES,OAAOtB,GAAsB,GAAGoB,OAAO,MAGpE,kBAAC,IAAD,CAAKD,KAAM,IACT,kBAAC,IAAD,CACEJ,MAAM,0BACNK,MAAOC,YAAgBR,IAAES,OAAOzB,GAAuB,GAAGuB,OAAO,SAa/E5D,EAAO+D,aAAe,CACpB5B,QAAS6B,IAAUC,QAcNC,mCAAelE,GAX9B,SAAyBoC,GAAQ,IACvBF,EAA4CE,EAA5CF,QAASF,EAAmCI,EAAnCJ,SAAUT,EAAyBa,EAAzBb,UAAWgB,EAAcH,EAAdG,KAAMf,EAAQY,EAARZ,IAE5C,MAAO,CACLU,UACAF,WACAO,KAAK,2BAAMA,GAAShB,EAAUgB,MAC9Bf,IAAI,2BAAMA,GAAQD,EAAUC","file":"static/js/9.f6c3f5d6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { drizzleConnect } from '@drizzle/react-plugin';\nimport { Skeleton, Card, Statistic, Row, Col, Button, message } from 'antd';\nimport axios from 'axios';\n\nimport { formatCelrValue } from '../utils/unit';\n\nclass Reward extends React.Component {\n  constructor(props, context) {\n    super(props);\n\n    const {\n      accounts,\n      network: { setting }\n    } = props;\n    this.currentUser = accounts[0];\n    this.contracts = context.drizzle.contracts;\n    this.state = {};\n\n    this.contracts.SGN.methods.redeemedServiceReward.cacheCall(this.currentUser);\n    this.contracts.DPoS.methods.redeemedMiningReward.cacheCall(this.currentUser);\n\n    this.gateway = axios.create({\n      baseURL: setting.gateway,\n      timeout: 1000\n    });\n\n    this.gateway\n      .get(`/validator/reward/${this.currentUser}`)\n      .then((res) => {\n        const { result } = res.data;\n        this.setState({\n          miningReward: result.mining_reward,\n          serviceReward: result.service_reward\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n\n        if (err.response) {\n          message.error(err.response.data.error);\n          return;\n        }\n\n        message.warning('Please config gateway url in setting to load sgn reward correctly');\n      });\n  }\n\n  intendWithdraw = () => {\n    this.gateway\n      .post('/validator/withdrawReward', {\n        eth_addr: this.currentUser\n      })\n      .then(() => {\n        message.success('Success! Please wait a few seconds to trigger redeem.');\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  };\n\n  redeemReward = () => {\n    this.gateway\n      .get(`/validator/rewardRequest/${this.currentUser}`)\n      .then((res) => {\n        this.contracts.SGN.methods.redeemReward.cacheSend('0x' + res.data.result);\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  };\n\n  renderActions = () => {\n    return [\n      <Button type=\"primary\" onClick={this.intendWithdraw}>\n        Initialize Redeem\n      </Button>,\n      <Button type=\"primary\" onClick={this.redeemReward}>\n        Redeem Reward\n      </Button>\n    ];\n  };\n\n  render() {\n    const { DPoS, SGN } = this.props;\n    const { miningReward, serviceReward } = this.state;\n    const { redeemedMiningReward } = DPoS;\n    const { redeemedServiceReward } = SGN;\n\n    if (_.isEmpty(redeemedServiceReward) || _.isEmpty(redeemedMiningReward)) {\n      return <Skeleton />;\n    }\n\n    return (\n      <Card title=\"Reward\" actions={this.renderActions()}>\n        <Row style={{ marginTop: '10px' }}>\n          <Col span={12}>\n            <Statistic\n              title=\"Cumulative Mining Reward\"\n              value={formatCelrValue(miningReward, true)}\n            />\n          </Col>\n          <Col span={12}>\n            <Statistic\n              title=\"Cumulative Service Reward\"\n              value={formatCelrValue(serviceReward, true)}\n            />\n          </Col>\n          <Col span={12}>\n            <Statistic\n              title=\"Redeemed Mining Reward\"\n              value={formatCelrValue(_.values(redeemedMiningReward)[0].value, true)}\n            />\n          </Col>\n          <Col span={12}>\n            <Statistic\n              title=\"Redeemed Service Reward\"\n              value={formatCelrValue(_.values(redeemedServiceReward)[0].value, true)}\n            />\n          </Col>\n        </Row>\n      </Card>\n    );\n  }\n}\n\nReward.propTypes = {\n  dispatch: PropTypes.func.isRequired\n};\n\nReward.contextTypes = {\n  drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n  const { network, accounts, contracts, DPoS, SGN } = state;\n\n  return {\n    network,\n    accounts,\n    DPoS: { ...DPoS, ...contracts.DPoS },\n    SGN: { ...SGN, ...contracts.SGN }\n  };\n}\n\nexport default drizzleConnect(Reward, mapStateToProps);\n"],"sourceRoot":""}