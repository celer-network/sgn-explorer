{"version":3,"sources":["utils/network.js","components/form.js","utils/contracts.js","utils/constant.js","utils/unit.js","utils/form.js","components/select.js","components/approve-celr.js","components/setting.js","components/account-info.js","utils/subscribe.js","App.js","router.js","models/celr-token.js","models/dpos.js","models/sgn.js","models/network.js","index.js"],"names":["networkConfigs","localNetworkConfig","getNetworkConfig","networkID","networkConfig","checkNetworkCompatibility","requiredName","process","window","web3","currentProvider","networkVersion","Modal","error","title","content","FormItem","Form","Item","buttonLayout","wrapperCol","sm","span","offset","xs","FIELD_MAP","date","DatePicker","input","Input","number","InputNumber","text","TextArea","select","Select","CustomizeForm","React","Component","handleSubmit","e","this","props","form","onSubmit","preventDefault","validateFields","err","values","renderFormItems","formItemLayout","items","getFieldDecorator","_","map","item","field","fieldOptions","initialValue","label","name","rules","Field","decoratorOptions","getValueFromEvent","args","fileList","target","type","checked","value","key","capitalize","render","submitText","noop","htmlType","defaultProps","labelCol","create","onValuesChange","changedValues","contractOptions","block","fallback","url","contracts","DPoS","SGN","CELRToken","polls","accounts","blocks","RATE_PRECISION","RATE_BASE","formatCelrValue","showDecimal","unit","toNumber","utils","fromWei","split","formatCurrencyValue","celrFieldOptions","formatter","parser","replace","minValueRule","minValue","validator","rule","callback","commissionRateField","placeholder","step","precision","message","required","rateLockEndTimeField","prefix","suffix","Option","allowClear","disabled","optionFilterProp","state","undefined","onChange","setState","getValue","defaultValue","renderOptions","options","omit","isNil","showSearch","ApproveCelrForm","constructor","context","super","onClose","current","methods","approve","address","toWei","toString","send","createRef","drizzle","visible","formItems","onOk","onCancel","ref","contextTypes","PropTypes","object","SettingForm","dispatch","console","log","payload","setting","network","gateway","placement","width","drizzleConnect","AccountInfo","celrValue","useState","showSetting","setShowSetting","className","extra","icon","onClick","getCelrAllowance","account","allowance","cacheCall","Sider","Layout","Content","Footer","App","toggleModal","prevState","isModalVisible","componentWillMount","events","InitializeCandidate","fromBlock","event","candidate","returnValues","getCandidateInfo","CreateParamProposal","paramProposals","proposalId","Approval","filter","owner","spender","subscribeEvent","blockNumber","selectedAddress","setInterval","location","reload","eth","getBlock","then","subscribeChainInfo","children","pathname","celerAllowance","theme","mode","selectedKeys","slice","to","style","textAlign","withRouter","ConnectedRouter","routerRedux","LoadingWrapper","LoadingContainer","redirectToHome","RouterConfig","history","app","Dynamic","component","Candidate","Govern","Reward","store","_store","exact","path","namespace","effects","reducers","save","action","JSON","parse","localStorage","getItem","protocol","hostname","saveSetting","put","setItem","stringify","rootSaga","all","drizzleSagas","saga","fork","dva","initialState","generateContractsInitialState","extraReducers","drizzleReducers","onError","resp","msg","srv","use","createLoading","model","CELRModel","DPoSModel","SGNModel","NetworkModel","router","require","default","start","runSaga"],"mappings":"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","file":"static/js/main.a000801b.chunk.js","sourcesContent":["import { Modal } from 'antd';\n\nconst MAINNET = '1';\nconst ROPSTEN = '3';\nconst RINKEBY = '4';\n\nconst networkConfigs = {};\n\nconst localNetworkConfig = {};\n\nexport const getNetworkConfig = (networkID) => {\n  let networkConfig = localNetworkConfig;\n  if (networkConfigs[networkID]) {\n    networkConfig = networkConfigs[networkID];\n  }\n\n  return networkConfig;\n};\n\nexport const checkNetworkCompatibility = () => {\n  if (process.env.NODE_ENV === 'development') {\n    return true;\n  }\n\n  const networkVersion = window.web3.currentProvider.networkVersion;\n  const requiredId = process.env.REACT_APP_NETWORK_ID;\n  let requiredName;\n  switch (requiredId) {\n    case ROPSTEN:\n      requiredName = 'ropsten';\n      break;\n    case MAINNET:\n      requiredName = 'mainnet';\n      break;\n    default:\n      requiredName = 'unknown';\n  }\n  if (networkVersion !== requiredId) {\n    Modal.error({\n      title: 'Current network is not supported',\n      content: `Please switch to ${requiredName}`\n    });\n    return false;\n  }\n  return true;\n};\n","import React from 'react';\nimport _ from 'lodash';\nimport { Button, DatePicker, Form, Input, InputNumber } from 'antd';\n\nimport Select from './select';\n\nconst FormItem = Form.Item;\n\nconst defaultFormItemLayout = {\n  labelCol: {\n    sm: { span: 8 },\n    xs: { span: 24 }\n  },\n\n  wrapperCol: {\n    sm: { span: 16 },\n    xs: { span: 24 }\n  }\n};\n\nconst buttonLayout = {\n  wrapperCol: {\n    sm: { span: 3, offset: 21 },\n    xs: { span: 24 }\n  }\n};\n\nconst FIELD_MAP = {\n  date: DatePicker,\n  input: Input,\n  number: InputNumber,\n  text: Input.TextArea,\n  select: Select\n};\n\nclass CustomizeForm extends React.Component {\n  handleSubmit = e => {\n    const { form, onSubmit } = this.props;\n    e.preventDefault();\n    form.validateFields((err, values) => {\n      if (!err) {\n        onSubmit(values);\n      }\n    });\n  };\n\n  renderFormItems = () => {\n    const { form, formItemLayout, items } = this.props;\n    const { getFieldDecorator } = form;\n\n    return _.map(items, item => {\n      const {\n        field = 'input',\n        fieldOptions,\n        initialValue,\n        label,\n        name,\n        rules\n      } = item;\n      const Field = FIELD_MAP[field];\n      const decoratorOptions = {\n        initialValue,\n        rules,\n        getValueFromEvent(...args) {\n          if (field === 'file') {\n            return args[0].fileList;\n          }\n\n          const [e] = args;\n          if (!e || !e.target) {\n            return e;\n          }\n\n          const { target } = e;\n          return target.type === 'checkbox' ? target.checked : target.value;\n        }\n      };\n\n      return (\n        <FormItem\n          key={name}\n          {...formItemLayout}\n          label={!label ? _.capitalize(name) : label}\n        >\n          {getFieldDecorator(\n            name,\n            decoratorOptions\n          )(<Field {...fieldOptions} />)}\n        </FormItem>\n      );\n    });\n  };\n\n  render() {\n    const { onSubmit, submitText } = this.props;\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        {this.renderFormItems()}\n        {onSubmit !== _.noop && (\n          <FormItem {...buttonLayout}>\n            <Button htmlType=\"submit\" type=\"primary\">\n              {submitText}\n            </Button>\n          </FormItem>\n        )}\n      </Form>\n    );\n  }\n}\n\nCustomizeForm.defaultProps = {\n  formItemLayout: defaultFormItemLayout,\n  onSubmit: _.noop,\n  submitText: 'Save'\n};\n\nexport default Form.create({\n  onValuesChange(props, changedValues) {\n    if (props.onValuesChange) {\n      props.onValuesChange(changedValues);\n    }\n  }\n})(CustomizeForm);\n","import DPoS from './../contracts/DPoS.json';\nimport SGN from './../contracts/SGN.json';\nimport CELRToken from './../contracts/CELRToken.json';\n\n// let drizzle know what contracts we want\nconst contractOptions = {\n    web3: {\n        block: false,\n        fallback: {\n            type: 'ws',\n            url: 'ws://localhost:8545'\n        }\n    },\n    contracts: [DPoS, SGN, CELRToken],\n    polls: {\n        accounts: 1000,\n        blocks: 1000\n    }\n};\n\nexport default contractOptions;\n","export const EMPTY_ADDRESS = '0x0000000000000000000000000000000000000000';\nexport const RATE_PRECISION = 2;\nexport const RATE_BASE = 10 ** RATE_PRECISION;\n","import _ from 'lodash';\nimport web3 from 'web3';\n\nimport './network';\n\nexport const CELR = 'CELR';\n\nexport const getUnitByAddress = (supportedTokens, address) => {\n  const token = _.find(\n    supportedTokens,\n    supportedToken => supportedToken.address === address\n  );\n\n  if (!token) {\n    return '';\n  }\n  return token.symbol;\n};\n\nexport const formatCurrencyValue = (value, unit, showDecimal) => {\n  if (!value) {\n    return;\n  }\n\n  const num = _.toNumber(value);\n\n  if (num < 100000) {\n    return `${value} wei`;\n  }\n\n  if (showDecimal) {\n    return `${web3.utils.fromWei(value)} ${unit}`;\n  }\n\n  return `${web3.utils.fromWei(value).split('.')[0]} ${unit}`;\n};\n\nexport const formatCelrValue = (value, showDecimal) => {\n  return formatCurrencyValue(value, CELR, showDecimal);\n};\n","import { RATE_PRECISION, RATE_BASE } from './constant';\n\nexport const currencyFieldOptions = unit => ({\n    formatter: value => (value ? `${value}${unit}` : ''),\n    parser: value => value.replace(/[A-Z]/g, '')\n});\n\nexport const celrFieldOptions = currencyFieldOptions('CELR');\n\nexport const dayFieldOptions = {\n    formatter: value => (value ? `${value}day` : ''),\n    parser: value => value.replace(/[a-z]/g, '')\n};\n\nexport const blockFieldOptions = {\n    formatter: value => (value ? `${value}block` : ''),\n    parser: value => value.replace(/[a-z]/g, '')\n};\n\nexport const rateFieldOptions = {\n    formatter: value => (value ? `${value}%` : ''),\n    parser: value => value.replace(/[%]/g, '')\n};\n\nexport const minValueRule = minValue => ({\n    validator: (rule, value, callback) => {\n        if (value < minValue) {\n            const msg = `value is smaller than ${minValue}`;\n            callback(msg);\n        }\n\n        callback();\n    }\n});\n\nexport const commissionRateField = {\n    name: 'commissionRate',\n    label: 'Commission Rate',\n    field: 'number',\n    fieldOptions: {\n        ...rateFieldOptions,\n        placeholder: 'The commission rate',\n        step: 1 / RATE_BASE,\n        precision: RATE_PRECISION\n    },\n    rules: [\n        minValueRule(0),\n        {\n            message: 'Please enter a commission rate!',\n            required: true\n        }\n    ]\n};\n\nexport const rateLockEndTimeField = {\n    name: 'rateLockEndTime',\n    label: 'Rate Lock End Time',\n    fieldOptions: {\n        placeholder: 'The rate lock end time',\n        prefix: '+',\n        suffix: 'blocks'\n    },\n    rules: [\n        {\n            message: 'Please enter a rate lock end time!',\n            required: true\n        }\n    ]\n};\n","import React from 'react';\nimport { Select } from 'antd';\nimport _ from 'lodash';\n\nconst Option = Select.Option;\n\nexport default class extends React.Component {\n    defaultProps = {\n        allowClear: true,\n        disabled: false,\n        optionFilterProp: 'children',\n        placeholder: ''\n    };\n\n    state = { value: undefined };\n\n    onChange = (value: ValueType) => this.setState({ value });\n\n    getValue = () => {\n        const { defaultValue } = this.props;\n        const { value } = this.state;\n        return value || defaultValue;\n    };\n\n    renderOptions = () => {\n        const { options } = this.props;\n        return _.map(options, ([value, text]) => (\n            <Option key={value} value={value}>\n                {text}\n            </Option>\n        ));\n    };\n\n    render() {\n        const { defaultValue } = this.props;\n        const props = {\n            ..._.omit(this.props, ['options', 'defaultValue'])\n        };\n\n        if (!props.onChange) {\n            props.onChange = this.onChange;\n        }\n        if (!_.isNil(defaultValue)) {\n            props.defaultValue = defaultValue;\n        }\n\n        return (\n            <Select {...props} showSearch={true}>\n                {this.renderOptions()}\n            </Select>\n        );\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport web3 from 'web3';\nimport { Modal } from 'antd';\n\nimport Form from './form';\nimport { celrFieldOptions } from '../utils/form';\n\nclass ApproveCelrForm extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.form = React.createRef();\n        this.contracts = context.drizzle.contracts;\n    }\n\n    onSubmit = () => {\n        const { onClose } = this.props;\n\n        this.form.current.validateFields((err, values) => {\n            if (err) {\n                return;\n            }\n\n            const { value } = values;\n\n            this.contracts.CELRToken.methods\n                .approve(\n                    this.contracts.DPoS.address,\n                    web3.utils.toWei(value.toString(), 'ether')\n                )\n                .send();\n\n            onClose();\n        });\n    };\n\n    render() {\n        const { visible, onClose } = this.props;\n        const formItems = [\n            {\n                name: 'value',\n                field: 'number',\n                fieldOptions: {\n                    ...celrFieldOptions,\n                    placeholder: 'The amount of CELR allowance DPoS has'\n                },\n                rules: [\n                    {\n                        message: 'Please enter a value!',\n                        required: true\n                    }\n                ]\n            }\n        ];\n\n        return (\n            <Modal\n                title=\"Approve CELR to DPoS\"\n                visible={visible}\n                onOk={this.onSubmit}\n                onCancel={onClose}\n            >\n                <Form ref={this.form} items={formItems} />\n            </Modal>\n        );\n    }\n}\n\nApproveCelrForm.propTypes = {\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n\nApproveCelrForm.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nexport default ApproveCelrForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Drawer } from 'antd';\nimport { drizzleConnect } from 'drizzle-react';\n\nimport Form from './form';\n\nclass SettingForm extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.state = {};\n        this.form = React.createRef();\n        this.contracts = context.drizzle.contracts;\n    }\n\n    handleSubmit = () => {\n        const { onClose, dispatch } = this.props;\n\n        this.form.current.validateFields((err, values) => {\n            if (err) {\n                console.log(err);\n                return;\n            }\n\n            dispatch({\n                type: 'network/saveSetting',\n                payload: { setting: values }\n            });\n\n            onClose();\n        });\n    };\n\n    render() {\n        const {\n            visible,\n            onClose,\n            network: { setting = {} }\n        } = this.props;\n\n        const formItems = [\n            {\n                name: 'gateway',\n                initialValue: setting.gateway,\n                fieldOptions: {\n                    placeholder: 'The gateway URL'\n                },\n                rules: [\n                    {\n                        message: 'Please enter gateway URL!',\n                        required: true\n                    }\n                ]\n            }\n        ];\n\n        return (\n            <Drawer\n                title=\"Setting\"\n                placement=\"right\"\n                width=\"500\"\n                onClose={onClose}\n                visible={visible}\n            >\n                <Form\n                    ref={this.form}\n                    items={formItems}\n                    onSubmit={this.handleSubmit}\n                />\n            </Drawer>\n        );\n    }\n}\n\nSettingForm.propTypes = {\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n\nSettingForm.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    const { network } = state;\n\n    return {\n        network\n    };\n}\n\nexport default drizzleConnect(SettingForm, mapStateToProps);\n","import React, { useState } from 'react';\nimport { Card, Statistic, Button } from 'antd';\n\nimport Setting from './setting';\nimport { formatCelrValue } from '../utils/unit';\n\nfunction AccountInfo(props) {\n    const { celrValue } = props;\n    const [showSetting, setShowSetting] = useState(false);\n\n    return (\n        <>\n            <Card\n                className=\"account-info\"\n                title=\"Account info\"\n                extra={\n                    <Button\n                        icon=\"setting\"\n                        title=\"Setting\"\n                        onClick={() => setShowSetting(true)}\n                    />\n                }\n            >\n                <Statistic\n                    title=\"CELR allowance for DPoS\"\n                    value={formatCelrValue(celrValue)}\n                />\n            </Card>\n            <Setting\n                visible={showSetting}\n                onClose={() => setShowSetting(false)}\n            />\n        </>\n    );\n}\n\nexport default AccountInfo;\n","const POLL_INTERVAL = 1000;\n\nexport const subscribeEvent = (account, contracts, dispatch) => {\n    const { DPoS, CELRToken } = contracts;\n\n    DPoS.events.InitializeCandidate(\n        {\n            fromBlock: 0\n        },\n        (err, event) => {\n            if (err) {\n                console.log(err);\n                return;\n            }\n\n            const { candidate } = event.returnValues;\n            DPoS.methods.getCandidateInfo.cacheCall(candidate);\n        }\n    );\n\n    DPoS.events.CreateParamProposal(\n        {\n            fromBlock: 0\n        },\n        (err, event) => {\n            if (err) {\n                console.log(err);\n                return;\n            }\n\n            DPoS.methods.paramProposals.cacheCall(\n                event.returnValues.proposalId\n            );\n        }\n    );\n\n    CELRToken.events.Approval(\n        {\n            filter: {\n                owner: account,\n                spender: DPoS.address\n            }\n        },\n        (err, event) => {\n            if (err) {\n                return;\n            }\n\n            getCelrAllowance(account, contracts);\n        }\n    );\n\n    getCelrAllowance(account, contracts);\n};\n\nexport const subscribeChainInfo = (web3, dispatch) => {\n    const account = web3.currentProvider.selectedAddress;\n    let blockNumber;\n\n    setInterval(() => {\n        if (account !== web3.currentProvider.selectedAddress) {\n            window.location.reload();\n        }\n\n        return web3.eth.getBlock('latest').then(block => {\n            if (block && blockNumber !== block.number) {\n                dispatch({\n                    type: 'network/save',\n                    payload: { block }\n                });\n                blockNumber = block.number;\n            }\n        });\n    }, POLL_INTERVAL);\n};\n\nconst getCelrAllowance = (account, contracts) => {\n    const { CELRToken, DPoS } = contracts;\n    CELRToken.methods.allowance.cacheCall(account, DPoS.address);\n};\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { drizzleConnect } from 'drizzle-react';\nimport { withRouter, Link } from 'dva/router';\nimport { Layout, Menu, Button } from 'antd';\n\nimport ApproveCELRForm from './components/approve-celr';\nimport AccountInfo from './components/account-info';\nimport { subscribeEvent, subscribeChainInfo } from './utils/subscribe';\nimport { getNetworkConfig } from './utils/network';\n\nimport './App.css';\n\nconst { Sider, Content, Footer } = Layout;\n\nclass App extends React.Component {\n  constructor(props, context) {\n    super(props);\n\n    this.state = { isModalVisible: false };\n    this.contracts = context.drizzle.contracts;\n    this.web3 = context.drizzle.web3;\n  }\n\n  componentWillMount() {\n    const { accounts, dispatch } = this.props;\n    subscribeEvent(accounts[0], this.contracts, dispatch);\n    subscribeChainInfo(this.web3, dispatch);\n\n    dispatch({\n      type: 'network/save',\n      payload: getNetworkConfig(this.web3.currentProvider.networkVersion)\n    });\n  }\n\n  toggleModal = () => {\n    this.setState(prevState => ({\n      isModalVisible: !prevState.isModalVisible\n    }));\n  };\n\n  render() {\n    const { isModalVisible } = this.state;\n    const { children, location, CELRToken } = this.props;\n    const { pathname } = location;\n    const celerAllowance = _.values(CELRToken.allowance)[0] || {};\n\n    return (\n      <Layout>\n        <Sider>\n          <AccountInfo celrValue={celerAllowance.value} />\n          <Menu theme=\"dark\" mode=\"inline\" selectedKeys={[pathname.slice(1)]}>\n            <Menu.Item key=\"dpos\">\n              <Link to=\"/dpos\">Validators</Link>\n            </Menu.Item>\n            {/* <Menu.Item key=\"govern\">\n                            <Link to=\"/govern\">Govern</Link>\n                        </Menu.Item> */}\n            <Menu.Item key=\"reward\">\n              <Link to=\"/reward\">Reward</Link>\n            </Menu.Item>\n            <Menu.Item className=\"approve-celr\">\n              <Button type=\"primary\" block onClick={this.toggleModal}>\n                Approve CELR\n              </Button>\n            </Menu.Item>\n          </Menu>\n        </Sider>\n        <Layout>\n          <Content>\n            {children}\n            <ApproveCELRForm\n              visible={isModalVisible}\n              onClose={this.toggleModal}\n            />\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>\n            Sgn ©2019 Created by Celer Network\n          </Footer>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nApp.propTypes = {\n  children: PropTypes.element.isRequired,\n  location: PropTypes.object.isRequired\n};\n\nApp.contextTypes = {\n  drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n  const { accounts, contracts } = state;\n\n  return {\n    accounts,\n    CELRToken: contracts.CELRToken\n  };\n}\n\nexport default withRouter(drizzleConnect(App, mapStateToProps));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter, routerRedux, Switch, Route, Redirect } from 'dva/router';\nimport Dynamic from 'dva/dynamic';\nimport { DrizzleProvider } from 'drizzle-react';\nimport { LoadingContainer } from 'drizzle-react-components';\n\nimport App from './App';\nimport contractOptions from './utils/contracts';\n\nconst { ConnectedRouter } = routerRedux;\nconst LoadingWrapper = withRouter(LoadingContainer);\n\nconst redirectToHome = () => <Redirect to=\"/dpos\" />;\n\nfunction RouterConfig({ history, app }) {\n  const DPoS = Dynamic({\n    app,\n    component: () => import('./routes/dpos')\n  });\n  const Candidate = Dynamic({\n    app,\n    component: () => import('./routes/candidate')\n  });\n  const Govern = Dynamic({\n    app,\n    component: () => import('./routes/govern')\n  });\n  const Reward = Dynamic({\n    app,\n    component: () => import('./routes/reward')\n  });\n\n  return (\n    <DrizzleProvider options={contractOptions} store={app._store}>\n      <ConnectedRouter history={history}>\n        <LoadingWrapper>\n          <App>\n            <Switch>\n              <Route exact path=\"/dpos\" component={DPoS} />\n              <Route exact path=\"/govern\" component={Govern} />\n              <Route exact path=\"/reward\" component={Reward} />\n              <Route exact path=\"/candidate/:id\" component={Candidate} />\n              <Route exact path=\"/\" render={redirectToHome} />\n            </Switch>\n          </App>\n        </LoadingWrapper>\n      </ConnectedRouter>\n    </DrizzleProvider>\n  );\n}\n\nRouterConfig.propTypes = {\n  history: PropTypes.object.isRequired\n};\n\nexport default RouterConfig;\n","export default {\n    namespace: 'CELRToken',\n\n    state: {},\n\n    effects: {},\n\n    reducers: {\n        save(state, action) {\n            return { ...state, ...action.payload };\n        }\n    }\n};\n","export default {\n    namespace: 'DPoS',\n\n    state: {},\n\n    effects: {},\n\n    reducers: {\n        save(state, action) {\n            return { ...state, ...action.payload };\n        }\n    }\n};\n","export default {\n    namespace: 'SGN',\n\n    state: {},\n\n    effects: {},\n\n    reducers: {\n        save(state, action) {\n            return { ...state, ...action.payload };\n        }\n    }\n};\n","const SETTING_KEY = 'setting';\n\nexport default {\n  namespace: 'network',\n\n  state: {\n    setting: JSON.parse(localStorage.getItem(SETTING_KEY)) || {\n      gateway: `${window.location.protocol}//${window.location.hostname}/gateway`\n    }\n  },\n\n  effects: {\n    *saveSetting({ payload }, { put }) {\n      const { setting } = payload;\n      localStorage.setItem(SETTING_KEY, JSON.stringify(setting));\n\n      yield put({ payload, type: 'save' });\n    }\n  },\n\n  reducers: {\n    save(state, action) {\n      return { ...state, ...action.payload };\n    }\n  }\n};\n","import dva from 'dva';\nimport createLoading from 'dva-loading';\nimport { all, fork } from 'redux-saga/effects';\nimport { generateContractsInitialState, drizzleReducers, drizzleSagas } from 'drizzle';\nimport { message } from 'antd';\n\nimport contractOptions from './utils/contracts';\nimport { checkNetworkCompatibility } from './utils/network';\nimport CELRModel from './models/celr-token';\nimport DPoSModel from './models/dpos';\nimport SGNModel from './models/sgn';\nimport NetworkModel from './models/network';\n\nfunction* rootSaga() {\n  yield all(drizzleSagas.map((saga) => fork(saga)));\n}\n\n// 1. Initialize\nconst app = dva({\n  initialState: {\n    ...generateContractsInitialState(contractOptions)\n  },\n  extraReducers: {\n    ...drizzleReducers\n  },\n  onError(err) {\n    if (err.resp) {\n      message.error(err.resp.msg);\n    } else if (err.srv) {\n      message.error(err.srv.msg);\n    } else {\n      message.error(err);\n    }\n  }\n});\n\n// 2. Plugins\napp.use(\n  createLoading({\n    namespace: 'loading'\n    // effects: enable effects level loading state\n  })\n);\n\n// 3. Model\n// Moved to router.js\napp.model(CELRModel);\napp.model(DPoSModel);\napp.model(SGNModel);\napp.model(NetworkModel);\n\n// 4. Router\napp.router(require('./router.js').default);\n\n// 5. Start\nif (checkNetworkCompatibility()) {\n  app.start('#root');\n  app._store.runSaga(rootSaga);\n}\n"],"sourceRoot":""}