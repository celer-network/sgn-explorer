{"version":3,"sources":["components/approve-celr.js","components/setting.js","components/account-info.js","utils/subscribe.js","App.js","router.js","models/celr-token.js","models/dpos.js","models/sgn.js","models/network.js","index.js","utils/network.js","components/form.js","utils/contracts.js","utils/constant.js","utils/unit.js","utils/form.js","components/select.js","../node_modules/web3-eth-accounts/src sync"],"names":["ApproveCelrForm","React","Component","constructor","props","context","super","onSubmit","onClose","this","form","current","validateFields","err","values","value","contracts","CELRToken","methods","approve","DPoS","address","web3","utils","toWei","toString","send","createRef","drizzle","render","visible","formItems","name","field","fieldOptions","celrFieldOptions","placeholder","rules","message","required","title","onOk","onCancel","ref","items","contextTypes","PropTypes","object","SettingForm","handleSubmit","dispatch","console","log","type","payload","setting","state","network","initialValue","gateway","placement","width","drizzleConnect","AccountInfo","celrValue","useState","showSetting","setShowSetting","className","extra","icon","onClick","formatCelrValue","getCelrAllowance","account","allowance","cacheCall","Sider","Layout","Content","Footer","App","toggleModal","setState","prevState","isModalVisible","componentWillMount","accounts","events","InitializeCandidate","fromBlock","event","candidate","returnValues","getCandidateInfo","Approval","filter","owner","spender","subscribeEvent","blockNumber","currentProvider","selectedAddress","setInterval","window","location","reload","eth","getBlock","then","block","number","subscribeChainInfo","getNetworkConfig","networkVersion","children","pathname","celerAllowance","_","theme","mode","selectedKeys","slice","Item","to","href","target","LinkOutlined","style","textAlign","withRouter","ConnectedRouter","routerRedux","LoadingWrapper","LoadingContainer","redirectToHome","RouterConfig","history","app","Dynamic","component","Candidate","Govern","Reward","ContractReader","options","contractOptions","store","_store","exact","path","namespace","effects","reducers","save","action","SETTING_KEY","JSON","parse","localStorage","getItem","protocol","hostname","saveSetting","put","setItem","stringify","rootSaga","all","drizzleSagas","map","saga","fork","dva","initialState","generateContractsInitialState","extraReducers","drizzleReducers","onError","resp","error","msg","srv","use","createLoading","model","CELRModel","DPoSModel","SGNModel","NetworkModel","router","require","default","checkNetworkCompatibility","start","runSaga","networkConfigs","localNetworkConfig","networkID","networkConfig","requiredName","process","String","parseInt","ethereum","chainId","Modal","content","FormItem","Form","buttonLayout","wrapperCol","sm","span","offset","xs","FIELD_MAP","date","DatePicker","input","Input","InputNumber","text","TextArea","select","Select","CustomizeForm","e","preventDefault","renderFormItems","formItemLayout","getFieldDecorator","item","label","Field","decoratorOptions","getValueFromEvent","args","fileList","checked","capitalize","submitText","noop","htmlType","defaultProps","labelCol","create","onValuesChange","changedValues","fallback","url","SGN","polls","blocks","RATE_PRECISION","RATE_BASE","showDecimal","unit","toNumber","fromWei","split","formatCurrencyValue","formatter","parser","replace","minValueRule","minValue","validator","rule","callback","commissionRateField","step","precision","rateLockEndTimeField","prefix","suffix","Option","allowClear","disabled","optionFilterProp","undefined","onChange","getValue","defaultValue","renderOptions","omit","isNil","showSearch","webpackEmptyContext","req","Error","code","keys","resolve","module","exports","id"],"mappings":"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","file":"static/js/main.f2875a6b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport web3 from 'web3';\nimport { Modal } from 'antd';\n\nimport Form from './form';\nimport { celrFieldOptions } from '../utils/form';\n\nclass ApproveCelrForm extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.form = React.createRef();\n        this.contracts = context.drizzle.contracts;\n    }\n\n    onSubmit = () => {\n        const { onClose } = this.props;\n\n        this.form.current.validateFields((err, values) => {\n            if (err) {\n                return;\n            }\n\n            const { value } = values;\n\n            this.contracts.CELRToken.methods\n                .approve(\n                    this.contracts.DPoS.address,\n                    web3.utils.toWei(value.toString(), 'ether')\n                )\n                .send();\n\n            onClose();\n        });\n    };\n\n    render() {\n        const { visible, onClose } = this.props;\n        const formItems = [\n            {\n                name: 'value',\n                field: 'number',\n                fieldOptions: {\n                    ...celrFieldOptions,\n                    placeholder: 'The amount of CELR allowance DPoS has'\n                },\n                rules: [\n                    {\n                        message: 'Please enter a value!',\n                        required: true\n                    }\n                ]\n            }\n        ];\n\n        return (\n            <Modal\n                title=\"Approve CELR to DPoS\"\n                visible={visible}\n                onOk={this.onSubmit}\n                onCancel={onClose}\n            >\n                <Form ref={this.form} items={formItems} />\n            </Modal>\n        );\n    }\n}\n\nApproveCelrForm.propTypes = {\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n\nApproveCelrForm.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nexport default ApproveCelrForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Drawer } from 'antd';\nimport { drizzleConnect } from '@drizzle/react-plugin';\n\nimport Form from './form';\n\nclass SettingForm extends React.Component {\n  constructor(props, context) {\n    super(props);\n\n    this.state = {};\n    this.form = React.createRef();\n    this.contracts = context.drizzle.contracts;\n  }\n\n  handleSubmit = () => {\n    const { onClose, dispatch } = this.props;\n\n    this.form.current.validateFields((err, values) => {\n      if (err) {\n        console.log(err);\n        return;\n      }\n\n      dispatch({\n        type: 'network/saveSetting',\n        payload: { setting: values }\n      });\n\n      onClose();\n    });\n  };\n\n  render() {\n    const {\n      visible,\n      onClose,\n      network: { setting = {} }\n    } = this.props;\n\n    const formItems = [\n      {\n        name: 'gateway',\n        initialValue: setting.gateway,\n        fieldOptions: {\n          placeholder: 'The gateway URL'\n        },\n        rules: [\n          {\n            message: 'Please enter gateway URL!',\n            required: true\n          }\n        ]\n      }\n    ];\n\n    return (\n      <Drawer title=\"Setting\" placement=\"right\" width=\"500\" onClose={onClose} visible={visible}>\n        <Form ref={this.form} items={formItems} onSubmit={this.handleSubmit} />\n      </Drawer>\n    );\n  }\n}\n\nSettingForm.propTypes = {\n  visible: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired\n};\n\nSettingForm.contextTypes = {\n  drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n  const { network } = state;\n\n  return {\n    network\n  };\n}\n\nexport default drizzleConnect(SettingForm, mapStateToProps);\n","import React, { useState } from 'react';\nimport { Card, Statistic, Button } from 'antd';\n\nimport Setting from './setting';\nimport { formatCelrValue } from '../utils/unit';\n\nfunction AccountInfo(props) {\n  const { celrValue } = props;\n  const [showSetting, setShowSetting] = useState(false);\n\n  return (\n    <>\n      <Card\n        className=\"account-info\"\n        title=\"Account info\"\n        extra={<Button icon=\"setting\" title=\"Setting\" onClick={() => setShowSetting(true)} />}\n      >\n        <Statistic title=\"CELR allowance for DPoS Contract\" value={formatCelrValue(celrValue)} />\n      </Card>\n      <Setting visible={showSetting} onClose={() => setShowSetting(false)} />\n    </>\n  );\n}\n\nexport default AccountInfo;\n","const POLL_INTERVAL = 1000;\n\nexport const subscribeEvent = (account, contracts, dispatch) => {\n  const { DPoS, CELRToken } = contracts;\n\n  DPoS.events.InitializeCandidate(\n    {\n      fromBlock: 0\n    },\n    (err, event) => {\n      if (err) {\n        console.log(err);\n        return;\n      }\n\n      const { candidate } = event.returnValues;\n      DPoS.methods.getCandidateInfo.cacheCall(candidate);\n    }\n  );\n\n  CELRToken.events.Approval(\n    {\n      filter: {\n        owner: account,\n        spender: DPoS.address\n      }\n    },\n    (err, event) => {\n      if (err) {\n        return;\n      }\n\n      getCelrAllowance(account, contracts);\n    }\n  );\n\n  getCelrAllowance(account, contracts);\n};\n\nexport const subscribeChainInfo = (web3, dispatch) => {\n  const account = web3.currentProvider.selectedAddress;\n  let blockNumber;\n\n  setInterval(() => {\n    if (account !== web3.currentProvider.selectedAddress) {\n      window.location.reload();\n    }\n\n    return web3.eth.getBlock('latest').then((block) => {\n      if (block && blockNumber !== block.number) {\n        dispatch({\n          type: 'network/save',\n          payload: { block }\n        });\n        blockNumber = block.number;\n      }\n    });\n  }, POLL_INTERVAL);\n};\n\nconst getCelrAllowance = (account, contracts) => {\n  const { CELRToken, DPoS } = contracts;\n  CELRToken.methods.allowance.cacheCall(account, DPoS.address);\n};\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { drizzleConnect } from '@drizzle/react-plugin';\nimport { withRouter, Link } from 'dva/router';\nimport { Layout, Menu, Button } from 'antd';\nimport { LinkOutlined } from '@ant-design/icons';\n\nimport ApproveCELRForm from './components/approve-celr';\nimport AccountInfo from './components/account-info';\nimport { subscribeEvent, subscribeChainInfo } from './utils/subscribe';\nimport { getNetworkConfig } from './utils/network';\n\nimport './App.css';\n\nconst { Sider, Content, Footer } = Layout;\n\nclass App extends React.Component {\n  constructor(props, context) {\n    super(props);\n\n    this.state = { isModalVisible: false };\n    this.contracts = context.drizzle.contracts;\n    this.web3 = context.drizzle.web3;\n  }\n\n  componentWillMount() {\n    const { accounts, dispatch } = this.props;\n    subscribeEvent(accounts[0], this.contracts, dispatch);\n    subscribeChainInfo(this.web3, dispatch);\n\n    dispatch({\n      type: 'network/save',\n      payload: getNetworkConfig(this.web3.currentProvider.networkVersion)\n    });\n  }\n\n  toggleModal = () => {\n    this.setState((prevState) => ({\n      isModalVisible: !prevState.isModalVisible\n    }));\n  };\n\n  render() {\n    const { isModalVisible } = this.state;\n    const { children, location, CELRToken } = this.props;\n    const { pathname } = location;\n    const celerAllowance = _.values(CELRToken.allowance)[0] || {};\n\n    return (\n      <Layout>\n        <Sider>\n          <AccountInfo celrValue={celerAllowance.value} />\n          <Menu theme=\"dark\" mode=\"inline\" selectedKeys={[pathname.slice(1)]}>\n            <Menu.Item key=\"dpos\">\n              <Link to=\"/dpos\">Validators</Link>\n            </Menu.Item>\n            {/* <Menu.Item key=\"govern\">\n                <Link to=\"/govern\">Govern</Link>\n            </Menu.Item> */}\n            <Menu.Item key=\"reward\">\n              <Link to=\"/reward\">Reward</Link>\n            </Menu.Item>\n            <Menu.Item key=\"contract-reader\">\n              <Link to=\"/contract-reader\">Contract Reader</Link>\n            </Menu.Item>\n            <Menu.Item>\n              <a\n                href=\"https://github.com/celer-network/sgn-networks/blob/master/docs/delegator.md\"\n                target=\"_blank\"\n              >\n                Delegator Instructions <LinkOutlined />\n              </a>\n            </Menu.Item>\n            <Menu.Item>\n              <a href=\"https://github.com/celer-network/sgn-networks\" target=\"_blank\">\n                Network Configurations <LinkOutlined />\n              </a>\n            </Menu.Item>\n            <Menu.Item className=\"approve-celr\">\n              <Button type=\"primary\" block onClick={this.toggleModal}>\n                Approve CELR\n              </Button>\n            </Menu.Item>\n          </Menu>\n        </Sider>\n        <Layout>\n          <Content>\n            {children}\n            <ApproveCELRForm visible={isModalVisible} onClose={this.toggleModal} />\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>SGN © 2019-2020 Celer Network</Footer>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nApp.propTypes = {\n  children: PropTypes.element.isRequired,\n  location: PropTypes.object.isRequired\n};\n\nApp.contextTypes = {\n  drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n  const { accounts, contracts } = state;\n\n  return {\n    accounts,\n    CELRToken: contracts.CELRToken\n  };\n}\n\nexport default withRouter(drizzleConnect(App, mapStateToProps));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter, routerRedux, Switch, Route, Redirect } from 'dva/router';\nimport Dynamic from 'dva/dynamic';\nimport { DrizzleProvider } from '@drizzle/react-plugin';\nimport { LoadingContainer } from '@drizzle/react-components';\n\nimport App from './App';\nimport contractOptions from './utils/contracts';\n\nconst { ConnectedRouter } = routerRedux;\nconst LoadingWrapper = withRouter(LoadingContainer);\n\nconst redirectToHome = () => <Redirect to=\"/dpos\" />;\n\nfunction RouterConfig({ history, app }) {\n  const DPoS = Dynamic({\n    app,\n    component: () => import('./routes/dpos')\n  });\n  const Candidate = Dynamic({\n    app,\n    component: () => import('./routes/candidate')\n  });\n  const Govern = Dynamic({\n    app,\n    component: () => import('./routes/govern')\n  });\n  const Reward = Dynamic({\n    app,\n    component: () => import('./routes/reward')\n  });\n  const ContractReader = Dynamic({\n    app,\n    component: () => import('./routes/contract-reader')\n  });\n\n  return (\n    <DrizzleProvider options={contractOptions} store={app._store}>\n      <ConnectedRouter history={history}>\n        <LoadingWrapper>\n          <App>\n            <Switch>\n              <Route exact path=\"/dpos\" component={DPoS} />\n              <Route exact path=\"/govern\" component={Govern} />\n              <Route exact path=\"/reward\" component={Reward} />\n              <Route exact path=\"/contract-reader\" component={ContractReader} />\n              <Route exact path=\"/candidate/:id\" component={Candidate} />\n              <Route exact path=\"/\" render={redirectToHome} />\n            </Switch>\n          </App>\n        </LoadingWrapper>\n      </ConnectedRouter>\n    </DrizzleProvider>\n  );\n}\n\nRouterConfig.propTypes = {\n  history: PropTypes.object.isRequired\n};\n\nexport default RouterConfig;\n","export default {\n    namespace: 'CELRToken',\n\n    state: {},\n\n    effects: {},\n\n    reducers: {\n        save(state, action) {\n            return { ...state, ...action.payload };\n        }\n    }\n};\n","export default {\n    namespace: 'DPoS',\n\n    state: {},\n\n    effects: {},\n\n    reducers: {\n        save(state, action) {\n            return { ...state, ...action.payload };\n        }\n    }\n};\n","export default {\n    namespace: 'SGN',\n\n    state: {},\n\n    effects: {},\n\n    reducers: {\n        save(state, action) {\n            return { ...state, ...action.payload };\n        }\n    }\n};\n","const SETTING_KEY = 'setting';\n\nexport default {\n  namespace: 'network',\n\n  state: {\n    setting: JSON.parse(localStorage.getItem(SETTING_KEY)) || {\n      gateway: `${window.location.protocol}//${window.location.hostname}/gateway`\n    }\n  },\n\n  effects: {\n    *saveSetting({ payload }, { put }) {\n      const { setting } = payload;\n      localStorage.setItem(SETTING_KEY, JSON.stringify(setting));\n\n      yield put({ payload, type: 'save' });\n    }\n  },\n\n  reducers: {\n    save(state, action) {\n      return { ...state, ...action.payload };\n    }\n  }\n};\n","import dva from 'dva';\nimport createLoading from 'dva-loading';\nimport { all, fork } from 'redux-saga/effects';\nimport { generateContractsInitialState, drizzleReducers, drizzleSagas } from '@drizzle/store';\nimport { message } from 'antd';\n\nimport contractOptions from './utils/contracts';\nimport { checkNetworkCompatibility } from './utils/network';\nimport CELRModel from './models/celr-token';\nimport DPoSModel from './models/dpos';\nimport SGNModel from './models/sgn';\nimport NetworkModel from './models/network';\n\nfunction* rootSaga() {\n  yield all(drizzleSagas.map((saga) => fork(saga)));\n}\n\n// 1. Initialize\nconst app = dva({\n  initialState: {\n    ...generateContractsInitialState(contractOptions)\n  },\n  extraReducers: {\n    ...drizzleReducers\n  },\n  onError(err) {\n    if (err.resp) {\n      message.error(err.resp.msg);\n    } else if (err.srv) {\n      message.error(err.srv.msg);\n    } else {\n      message.error(err);\n    }\n  }\n});\n\n// 2. Plugins\napp.use(\n  createLoading({\n    namespace: 'loading'\n    // effects: enable effects level loading state\n  })\n);\n\n// 3. Model\n// Moved to router.js\napp.model(CELRModel);\napp.model(DPoSModel);\napp.model(SGNModel);\napp.model(NetworkModel);\n\n// 4. Router\napp.router(require('./router.js').default);\n\n// 5. Start\nif (checkNetworkCompatibility()) {\n  app.start('#root');\n  app._store.runSaga(rootSaga);\n}\n","import { Modal } from 'antd';\n\nconst MAINNET = '1';\nconst ROPSTEN = '3';\n\nconst networkConfigs = {};\n\nconst localNetworkConfig = {};\n\nexport const getNetworkConfig = (networkID) => {\n  let networkConfig = localNetworkConfig;\n  if (networkConfigs[networkID]) {\n    networkConfig = networkConfigs[networkID];\n  }\n\n  return networkConfig;\n};\n\nexport const checkNetworkCompatibility = () => {\n  if (process.env.NODE_ENV === 'development') {\n    return true;\n  }\n\n  const networkVersion = String(parseInt(window.ethereum.chainId));\n  const requiredId = process.env.REACT_APP_NETWORK_ID;\n  let requiredName;\n  switch (requiredId) {\n    case ROPSTEN:\n      requiredName = 'ropsten';\n      break;\n    case MAINNET:\n      requiredName = 'mainnet';\n      break;\n    default:\n      requiredName = 'unknown';\n  }\n  if (networkVersion !== requiredId) {\n    Modal.error({\n      title: 'Current network is not supported',\n      content: `Please switch to ${requiredName}`\n    });\n    return false;\n  }\n  return true;\n};\n","import React from 'react';\nimport _ from 'lodash';\nimport { Button, DatePicker, Form, Input, InputNumber } from 'antd';\n\nimport Select from './select';\n\nconst FormItem = Form.Item;\n\nconst defaultFormItemLayout = {\n  labelCol: {\n    sm: { span: 8 },\n    xs: { span: 24 }\n  },\n\n  wrapperCol: {\n    sm: { span: 16 },\n    xs: { span: 24 }\n  }\n};\n\nconst buttonLayout = {\n  wrapperCol: {\n    sm: { span: 3, offset: 21 },\n    xs: { span: 24 }\n  }\n};\n\nconst FIELD_MAP = {\n  date: DatePicker,\n  input: Input,\n  number: InputNumber,\n  text: Input.TextArea,\n  select: Select\n};\n\nclass CustomizeForm extends React.Component {\n  handleSubmit = e => {\n    const { form, onSubmit } = this.props;\n    e.preventDefault();\n    form.validateFields((err, values) => {\n      if (!err) {\n        onSubmit(values);\n      }\n    });\n  };\n\n  renderFormItems = () => {\n    const { form, formItemLayout, items } = this.props;\n    const { getFieldDecorator } = form;\n\n    return _.map(items, item => {\n      const {\n        field = 'input',\n        fieldOptions,\n        initialValue,\n        label,\n        name,\n        rules\n      } = item;\n      const Field = FIELD_MAP[field];\n      const decoratorOptions = {\n        initialValue,\n        rules,\n        getValueFromEvent(...args) {\n          if (field === 'file') {\n            return args[0].fileList;\n          }\n\n          const [e] = args;\n          if (!e || !e.target) {\n            return e;\n          }\n\n          const { target } = e;\n          return target.type === 'checkbox' ? target.checked : target.value;\n        }\n      };\n\n      return (\n        <FormItem\n          key={name}\n          {...formItemLayout}\n          label={!label ? _.capitalize(name) : label}\n        >\n          {getFieldDecorator(\n            name,\n            decoratorOptions\n          )(<Field {...fieldOptions} />)}\n        </FormItem>\n      );\n    });\n  };\n\n  render() {\n    const { onSubmit, submitText } = this.props;\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        {this.renderFormItems()}\n        {onSubmit !== _.noop && (\n          <FormItem {...buttonLayout}>\n            <Button htmlType=\"submit\" type=\"primary\">\n              {submitText}\n            </Button>\n          </FormItem>\n        )}\n      </Form>\n    );\n  }\n}\n\nCustomizeForm.defaultProps = {\n  formItemLayout: defaultFormItemLayout,\n  onSubmit: _.noop,\n  submitText: 'Save'\n};\n\nexport default Form.create({\n  onValuesChange(props, changedValues) {\n    if (props.onValuesChange) {\n      props.onValuesChange(changedValues);\n    }\n  }\n})(CustomizeForm);\n","import DPoS from './../contracts/DPoS.json';\nimport SGN from './../contracts/SGN.json';\nimport CELRToken from './../contracts/CELRToken.json';\n\n// let drizzle know what contracts we want\nconst contractOptions = {\n    web3: {\n        block: false,\n        fallback: {\n            type: 'ws',\n            url: 'ws://localhost:8545'\n        }\n    },\n    contracts: [DPoS, SGN, CELRToken],\n    polls: {\n        accounts: 1000,\n        blocks: 1000\n    }\n};\n\nexport default contractOptions;\n","export const EMPTY_ADDRESS = '0x0000000000000000000000000000000000000000';\nexport const RATE_PRECISION = 2;\nexport const RATE_BASE = 10 ** RATE_PRECISION;\n","import _ from 'lodash';\nimport web3 from 'web3';\n\nimport './network';\n\nexport const CELR = 'CELR';\n\nexport const getUnitByAddress = (supportedTokens, address) => {\n  const token = _.find(\n    supportedTokens,\n    supportedToken => supportedToken.address === address\n  );\n\n  if (!token) {\n    return '';\n  }\n  return token.symbol;\n};\n\nexport const formatCurrencyValue = (value, unit, showDecimal) => {\n  if (!value) {\n    return;\n  }\n\n  const num = _.toNumber(value);\n\n  if (num < 100000) {\n    return `${value} wei`;\n  }\n\n  if (showDecimal) {\n    return `${web3.utils.fromWei(value)} ${unit}`;\n  }\n\n  return `${web3.utils.fromWei(value).split('.')[0]} ${unit}`;\n};\n\nexport const formatCelrValue = (value, showDecimal) => {\n  return formatCurrencyValue(value, CELR, showDecimal);\n};\n","import { RATE_PRECISION, RATE_BASE } from './constant';\n\nexport const currencyFieldOptions = unit => ({\n    formatter: value => (value ? `${value}${unit}` : ''),\n    parser: value => value.replace(/[A-Z]/g, '')\n});\n\nexport const celrFieldOptions = currencyFieldOptions('CELR');\n\nexport const dayFieldOptions = {\n    formatter: value => (value ? `${value}day` : ''),\n    parser: value => value.replace(/[a-z]/g, '')\n};\n\nexport const blockFieldOptions = {\n    formatter: value => (value ? `${value}block` : ''),\n    parser: value => value.replace(/[a-z]/g, '')\n};\n\nexport const rateFieldOptions = {\n    formatter: value => (value ? `${value}%` : ''),\n    parser: value => value.replace(/[%]/g, '')\n};\n\nexport const minValueRule = minValue => ({\n    validator: (rule, value, callback) => {\n        if (value < minValue) {\n            const msg = `value is smaller than ${minValue}`;\n            callback(msg);\n        }\n\n        callback();\n    }\n});\n\nexport const commissionRateField = {\n    name: 'commissionRate',\n    label: 'Commission Rate',\n    field: 'number',\n    fieldOptions: {\n        ...rateFieldOptions,\n        placeholder: 'The commission rate',\n        step: 1 / RATE_BASE,\n        precision: RATE_PRECISION\n    },\n    rules: [\n        minValueRule(0),\n        {\n            message: 'Please enter a commission rate!',\n            required: true\n        }\n    ]\n};\n\nexport const rateLockEndTimeField = {\n    name: 'rateLockEndTime',\n    label: 'Rate Lock End Time',\n    fieldOptions: {\n        placeholder: 'The rate lock end time',\n        prefix: '+',\n        suffix: 'blocks'\n    },\n    rules: [\n        {\n            message: 'Please enter a rate lock end time!',\n            required: true\n        }\n    ]\n};\n","import React from 'react';\nimport { Select } from 'antd';\nimport _ from 'lodash';\n\nconst Option = Select.Option;\n\nexport default class extends React.Component {\n    defaultProps = {\n        allowClear: true,\n        disabled: false,\n        optionFilterProp: 'children',\n        placeholder: ''\n    };\n\n    state = { value: undefined };\n\n    onChange = (value: ValueType) => this.setState({ value });\n\n    getValue = () => {\n        const { defaultValue } = this.props;\n        const { value } = this.state;\n        return value || defaultValue;\n    };\n\n    renderOptions = () => {\n        const { options } = this.props;\n        return _.map(options, ([value, text]) => (\n            <Option key={value} value={value}>\n                {text}\n            </Option>\n        ));\n    };\n\n    render() {\n        const { defaultValue } = this.props;\n        const props = {\n            ..._.omit(this.props, ['options', 'defaultValue'])\n        };\n\n        if (!props.onChange) {\n            props.onChange = this.onChange;\n        }\n        if (!_.isNil(defaultValue)) {\n            props.defaultValue = defaultValue;\n        }\n\n        return (\n            <Select {...props} showSearch={true}>\n                {this.renderOptions()}\n            </Select>\n        );\n    }\n}\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 920;"],"sourceRoot":""}