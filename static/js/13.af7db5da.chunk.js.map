{"version":3,"sources":["components/contract-reader/delegator-info.js","components/contract-reader/param-value.js","routes/contract-reader.js","utils/dpos.js"],"names":["columns","title","dataIndex","DelegatorInfo","React","Component","constructor","props","context","super","handleQuery","this","form","current","validateFields","err","values","console","log","candidateAddr","delegatorAddr","contracts","DPoS","methods","getDelegatorInfo","call","delegator","setState","state","createRef","drizzle","renderResult","delegatedStake","undelegatingStake","intentAmounts","intentProposedTimes","dataSource","_","zip","map","intentAmount","intentProposedTime","Item","label","pagination","render","ref","items","name","fieldOptions","placeholder","rules","message","required","submitText","onSubmit","contextTypes","PropTypes","object","ParamValue","param","getUIntValue","value","formItems","field","options","PARAM_NAMES","index","Panel","Collapse","ContractReader","defaultActiveKey","onChange","header","key","drizzleConnect","CANDIDATE_STATUS","PROPOSAL_STATUS","Voting","Closed","VOTE_TYPE","Yes","No","Abstain"],"mappings":"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","file":"static/js/13.af7db5da.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { Descriptions, Table } from 'antd';\n\nimport Form from '../form';\n\nconst columns = [\n  {\n    title: 'Intent Withdraw Amount',\n    dataIndex: 'intentAmount'\n  },\n  {\n    title: 'Intent Withdraw Block Height',\n    dataIndex: 'intentProposedTime'\n  }\n];\n\nclass DelegatorInfo extends React.Component {\n  constructor(props, context) {\n    super(props);\n\n    this.state = {};\n    this.form = React.createRef();\n    this.contracts = context.drizzle.contracts;\n  }\n\n  handleQuery = () => {\n    this.form.current.validateFields((err, values) => {\n      if (err) {\n        console.log(err);\n        return;\n      }\n\n      const { candidateAddr, delegatorAddr } = values;\n\n      this.contracts.DPoS.methods\n        .getDelegatorInfo(candidateAddr, delegatorAddr)\n        .call((err, delegator) => {\n          this.setState({\n            delegator\n          });\n        });\n    });\n  };\n\n  renderResult() {\n    const { delegator } = this.state;\n\n    if (!delegator) {\n      return;\n    }\n\n    const { delegatedStake, undelegatingStake, intentAmounts, intentProposedTimes } = delegator;\n    const dataSource = _.zip(intentAmounts, intentProposedTimes).map(\n      ([intentAmount, intentProposedTime]) => ({\n        intentAmount,\n        intentProposedTime\n      })\n    );\n\n    return (\n      <>\n        <Descriptions title=\"Result\">\n          <Descriptions.Item label=\"Delegated Stake\">{delegatedStake}</Descriptions.Item>\n          <Descriptions.Item label=\"Undelegating Stake\">{undelegatingStake}</Descriptions.Item>\n        </Descriptions>\n        <Table dataSource={dataSource} columns={columns} pagination={false} />\n      </>\n    );\n  }\n\n  render() {\n    const formItems = [\n      {\n        name: 'candidateAddr',\n        label: 'Candidate Address',\n        fieldOptions: {\n          placeholder: 'Candidate Address'\n        },\n        rules: [\n          {\n            message: 'Please enter Candidate Address!',\n            required: true\n          }\n        ]\n      },\n      {\n        name: 'delegatorAddr',\n        label: 'Delegator Address',\n        fieldOptions: {\n          placeholder: 'Delegator Address'\n        },\n        rules: [\n          {\n            message: 'Please enter Delegator Address!',\n            required: true\n          }\n        ]\n      }\n    ];\n\n    return (\n      <div>\n        <Form ref={this.form} items={formItems} submitText=\"Query\" onSubmit={this.handleQuery} />\n        {this.renderResult()}\n      </div>\n    );\n  }\n}\n\nDelegatorInfo.propTypes = {};\n\nDelegatorInfo.contextTypes = {\n  drizzle: PropTypes.object\n};\n\nexport default DelegatorInfo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Descriptions } from 'antd';\n\nimport Form from '../form';\nimport { PARAM_NAMES } from '../../utils/dpos';\n\nclass ParamValue extends React.Component {\n  constructor(props, context) {\n    super(props);\n\n    this.state = {};\n    this.form = React.createRef();\n    this.contracts = context.drizzle.contracts;\n  }\n\n  handleQuery = () => {\n    this.form.current.validateFields((err, values) => {\n      if (err) {\n        console.log(err);\n        return;\n      }\n\n      const { param } = values;\n\n      this.contracts.DPoS.methods.getUIntValue(param).call((err, value) => {\n        this.setState({\n          value\n        });\n      });\n    });\n  };\n\n  renderResult() {\n    const { value } = this.state;\n\n    if (!value) {\n      return;\n    }\n\n    return (\n      <>\n        <Descriptions title=\"Result\">\n          <Descriptions.Item label=\"Value\">{value}</Descriptions.Item>\n        </Descriptions>\n      </>\n    );\n  }\n\n  render() {\n    const recordOptions = PARAM_NAMES.map((param, index) => [index, param]);\n\n    const formItems = [\n      {\n        name: 'param',\n        label: 'Param Name',\n        field: 'select',\n        fieldOptions: {\n          options: recordOptions,\n          placeholder: 'The parameter record'\n        },\n\n        rules: [\n          {\n            message: 'Please select Param Name!',\n            required: true\n          }\n        ]\n      }\n    ];\n\n    return (\n      <div>\n        <Form ref={this.form} items={formItems} submitText=\"Query\" onSubmit={this.handleQuery} />\n        {this.renderResult()}\n      </div>\n    );\n  }\n}\n\nParamValue.propTypes = {};\n\nParamValue.contextTypes = {\n  drizzle: PropTypes.object\n};\n\nexport default ParamValue;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { drizzleConnect } from '@drizzle/react-plugin';\nimport { Card, Collapse } from 'antd';\n\nimport DelegatorInfo from '../components/contract-reader/delegator-info';\nimport ParamValue from '../components/contract-reader/param-value';\n\nconst { Panel } = Collapse;\n\nclass ContractReader extends React.Component {\n  constructor(props, context) {\n    super(props);\n\n    this.contracts = context.drizzle.contracts;\n  }\n\n  render() {\n    return (\n      <Card title=\"Contract Reader\">\n        <Collapse defaultActiveKey={['DelegatorInfo']} onChange={console.log}>\n          <Panel header=\"GetDelegatorInfo\" key=\"DelegatorInfo\">\n            <DelegatorInfo />\n          </Panel>\n          <Panel header=\"GetParamValue\" key=\"ParamValue\">\n            <ParamValue />\n          </Panel>\n        </Collapse>\n      </Card>\n    );\n  }\n}\n\nContractReader.propTypes = {\n  dispatch: PropTypes.func.isRequired\n};\n\nContractReader.contextTypes = {\n  drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {}\n\nexport default drizzleConnect(ContractReader, mapStateToProps);\n","export const CANDIDATE_STATUS = ['Unbonded', 'Bonded', 'Unbonding'];\n\nexport const PARAM_NAMES = [\n    'ProposalDeposit',\n    'GovernVoteTimeout',\n    'SlashTimeout',\n    'MinValidatorNum',\n    'MaxValidatorNum',\n    'MinStakeInPool',\n    'AdvanceNoticePeriod'\n];\n\nexport const PROPOSAL_STATUS = { Voting: '1', Closed: '2' };\n\nexport const VOTE_TYPE = {\n    Yes: 1,\n    No: 2,\n    Abstain: 3\n};\n"],"sourceRoot":""}