{"version":3,"sources":["utils/unit.js","utils/constant.js","utils/form.js","../node_modules/web3-eth-accounts/src sync","components/candidate/delegate-form.js","components/candidate/withdraw-form.js","components/reward/validator.js","components/reward/myDelegations.js","routes/reward.js"],"names":["formatCelrValue","value","showDecimal","unit","web3","utils","fromWei","split","formatCurrencyValue","RATE_PRECISION","RATE_BASE","celrFieldOptions","formatter","parser","replace","minValueRule","minValue","validator","rule","callback","commissionRateField","name","label","field","fieldOptions","placeholder","step","precision","rules","message","required","rateLockEndTimeField","prefix","suffix","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","DelegateForm","React","Component","constructor","props","context","super","onFinish","console","log","CELRToken","this","celerAllowance","_","values","allowance","stateNum","contracts","methods","approve","DPoS","address","toWei","Number","MAX_SAFE_INTEGER","toString","send","on","receipt","sendDelegate","setState","approving","onClose","candidateId","delegate","cacheSend","setMax","maxValue","accountBalances","account","formRef","current","setFieldsValue","createRef","drizzle","state","render","visible","title","className","width","onCancel","footer","spinning","tip","ref","initialValues","Item","block","onClick","gutter","span","type","htmlType","style","backgroundColor","color","border","height","fontSize","borderRadius","marginTop","contextTypes","PropTypes","object","drizzleConnect","accounts","WithdrawForm","onSubmit","candidate","candidateAddr","args","form","validateFields","err","status","withdrawFromUnbondedCandidate","intendWithdraw","formItems","onOk","items","Validator","getDelegatorInfo","cacheCall","window","ethereum","selectedAddress","stakeMethod","unBondMethod","delegatorInfo","candidates","getCandidateInfo","commissionRate","find","delegatedStake","undelegatingStake","justify","network","SGN","MyDelegations","useState","setCandidateId","setCandidate","isWithdrawModalVisible","setIsWithdrawModalVisible","isDelegateModalVisible","setIsDelegateModalVisible","toggleDelegateModal","toggleWithdrawModal","data","candidateIds","map","index","key","Reward","gateway","post","eth_addr","currentUser","then","success","waitSigs","catch","error","action","waitTime","interval","setInterval","clearInterval","redeemReward","get","res","result","redeemedMiningReward","redeemedServiceReward","mining_reward","service_reward","reward_request_proto_bytes","warn","renderActions","disabled","setting","axios","create","baseURL","timeout","miningReward","serviceReward","response","warning","isEmpty","actions"],"mappings":"sHAAA,+DA4BaA,GA5Bb,OA4B+B,CAACC,EAAOC,IAZJ,EAACD,EAAOE,EAAMD,KAC/C,GAAKD,EAIL,OAAIC,EACI,GAAN,OAAUE,IAAKC,MAAMC,QAAQL,GAA7B,YAAuCE,GAGnC,GAAN,OAAUC,IAAKC,MAAMC,QAAQL,GAAOM,MAAM,KAAK,GAA/C,YAAqDJ,IAI9CK,CAAoBP,EAxBT,OAwBsBC,K,kCC7B1C,oEAAO,IACMO,EAAiB,EACjBC,EAAS,SAAG,GAAMD,I,8KCAKN,E,kBAKvBQ,GALuBR,EAKiB,OALb,CACpCS,UAAWX,GAAUA,EAAK,UAAMA,GAAN,OAAcE,GAAS,GACjDU,OAAQZ,GAASA,EAAMa,QAAQ,SAAU,MAoBhCC,EAAeC,IAAQ,CAChCC,UAAW,CAACC,EAAMjB,EAAOkB,KACjBlB,EAAQe,GAERG,EADS,gCAA4BH,IAIzCG,OAIKC,EAAsB,CAC/BC,KAAM,iBACNC,MAAO,kBACPC,MAAO,SACPC,aAAa,2BApBe,CAC5BZ,UAAWX,GAAUA,EAAK,UAAMA,EAAN,KAAiB,GAC3CY,OAAQZ,GAASA,EAAMa,QAAQ,OAAQ,MAkB3B,IAERW,YAAa,sBACbC,KAAM,EAAIhB,IACViB,UAAWlB,MAEfmB,MAAO,CACHb,EAAa,GACb,CACIc,QAAS,kCACTC,UAAU,KAKTC,EAAuB,CAChCV,KAAM,kBACNC,MAAO,qBACPE,aAAc,CACVC,YAAa,yBACbO,OAAQ,IACRC,OAAQ,UAEZL,MAAO,CACH,CACIC,QAAS,qCACTC,UAAU,M,6DCjEtB,SAASI,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,M,kCCRzB,2LAaA,MAAMC,UAAqBC,IAAMC,UAC/BC,YAAYC,EAAOC,GACjBC,MAAMF,GADoB,KAQ5BG,SAAYlD,IACVmD,QAAQC,IAAIpD,GADQ,IAEZqD,EAAcC,KAAKP,MAAnBM,UACFE,EAAiBC,IAAEC,OAAOJ,EAAUK,WAAW,IAAM,GACnDC,EAAa3D,EAAb2D,SACJA,EAAWxD,IAAKC,MAAMC,QAAQkD,EAAevD,QAC/CsD,KAAKM,UAAUP,UAAUQ,QACtBC,QACCR,KAAKM,UAAUG,KAAKC,QACpB7D,IAAKC,MAAM6D,MAAMC,OAAOC,iBAAiBC,WAAY,UAEtDC,KAAK,IACLC,GAAG,UAAYC,IACdjB,KAAKkB,aAAab,KAEtBL,KAAKmB,SAAS,CACZC,WAAW,KAGbpB,KAAKkB,aAAab,IA3BM,KA+B5Ba,aAAgBxE,IAAW,IAAD,EACSsD,KAAKP,MAA9B4B,EADgB,EAChBA,QAASC,EADO,EACPA,YAEjBtB,KAAKM,UAAUG,KAAKF,QAAQgB,SAASC,UACnCF,EACAzE,IAAKC,MAAM6D,MAAMjE,EAAMoE,WAAY,UAGrCd,KAAKmB,SAAS,CACZC,WAAW,IAEbC,KA1C0B,KA6C5BI,OAAS,KAAO,IAAD,EACwBzB,KAAKP,MACpCiC,EAFO,EACLC,gBADK,EACYC,SAEzB5B,KAAK6B,QAAQC,QAAQC,eAAe,CAAC1B,SAAUqB,KA7C/C1B,KAAK6B,QAAUvC,IAAM0C,YACrBhC,KAAKM,UAAYZ,EAAQuC,QAAQ3B,UACjCN,KAAKkC,MAAQ,CAAEd,WAAW,GA8C5Be,SAAU,IAAD,EACgDnC,KAAKP,MAApD2C,EADD,EACCA,QAASf,EADV,EACUA,QACXK,EAFC,EACmBC,gBADnB,EACoCC,SAK3C,OAFA/B,QAAQC,IAAI4B,EAAU7E,IAAKC,MAAM6D,MAAMe,EAASZ,WAAY,UAG1D,kBAAC,IAAD,CAAOuB,MAAM,WAAWC,UAAU,gBAAgBC,MAAM,QAAQH,QAASA,EAASI,SAAUnB,EAASoB,OAAQ,MAC3G,kBAAC,IAAD,CAAMC,SAAU1C,KAAKkC,MAAMd,UAAWuB,IAAI,2BACxC,kBAAC,IAAD,CAAMC,IAAK5C,KAAK6B,QAASjC,SAAUI,KAAKJ,SAAUiD,cAAe,CAACxC,SAAU,IAC1E,yBAAKiC,UAAU,aACb,kBAAC,IAAKQ,KAAN,CAAWhF,KAAK,WAAWO,MAAO,CAAC,CACjCC,QAAS,wBACTC,UAAU,KAEV,kBAAC,IAAgBnB,MAEnB,kBAAC,IAAD,CAAQ2F,OAAK,EAACC,QAAShD,KAAKyB,QAA5B,QAIF,kBAAC,IAAD,CAAKwB,OAAQ,GAAIX,UAAU,iBACzB,kBAAC,IAAD,CAAKY,KAAM,IACT,kBAAC,IAAD,CAAWb,MAAM,mBAAmB3F,MAAO,KAE7C,kBAAC,IAAD,CAAKwG,KAAM,IACT,kBAAC,IAAD,CAAWb,MAAM,mBAAmB3F,MAAOD,YAAgBiF,OAG/D,kBAAC,IAAKoB,KAAN,KACE,kBAAC,IAAD,CAAQK,KAAK,UAAUC,SAAS,SAASL,OAAK,EAACM,MAAO,CAACC,gBAAiB,UAAWC,MAAO,UAAWC,OAAQ,oBAAqBC,OAAQ,WAAYC,SAAS,WAAYC,aAAa,SAAUC,UAAW,WAA7M,iBAgBdvE,EAAawE,aAAe,CAC1B5B,QAAS6B,IAAUC,QAWNC,6BAAe3E,GAR9B,SAAyB6C,GAAQ,IACvB5B,EAAyC4B,EAAzC5B,UAAWqB,EAA8BO,EAA9BP,gBAAiBsC,EAAa/B,EAAb+B,SACpC,MAAO,CACLlE,UAAWO,EAAUP,UACrB4B,kBACAC,QAASqC,EAAS,Q,qJChHtB,MAAMC,UAAqB5E,IAAMC,UAC7BC,YAAYC,EAAOC,GACfC,MAAMF,GADkB,KAO5B0E,SAAW,KAAO,IAAD,EACkBnE,KAAKP,MAA5B4B,EADK,EACLA,QAAS+C,EADJ,EACIA,UACXC,EAAgBD,EAAUE,KAAK,GAErCtE,KAAKuE,KAAKzC,QAAQ0C,eAAe,CAACC,EAAKtE,KACnC,IAAIsE,EAAJ,CAD8C,IAKtC/H,EAAUyD,EAAVzD,MAEuB,MAA3B0H,EAAU1H,MAAMgI,OAChB1E,KAAKM,UAAUG,KAAKF,QAAQoE,8BAA8BnD,UACtD6C,EACAxH,IAAKC,MAAM6D,MAAMjE,EAAMoE,WAAY,UAGvCd,KAAKM,UAAUG,KAAKF,QAAQqE,eAAepD,UACvC6C,EACAxH,IAAKC,MAAM6D,MAAMjE,EAAMoE,WAAY,UAI3CO,QA3BJrB,KAAKuE,KAAOjF,IAAM0C,YAClBhC,KAAKM,UAAYZ,EAAQuC,QAAQ3B,UA8BrC6B,SAAU,IAAD,EACwBnC,KAAKP,MAA1B2C,EADH,EACGA,QAASf,EADZ,EACYA,QACXwD,EAAY,CACd,CACI/G,KAAM,QACNE,MAAO,SACPC,aAAa,2BACNb,KADK,IAERc,YAAa,mCAEjBG,MAAO,CACH,CACIC,QAAS,wBACTC,UAAU,MAM1B,OACI,kBAAC,IAAD,CACI8D,MAAM,iBACND,QAASA,EACT0C,KAAM9E,KAAKmE,SACX3B,SAAUnB,GAEV,kBAAC,IAAD,CAAMuB,IAAK5C,KAAKuE,KAAMQ,MAAOF,MAW7CX,EAAaL,aAAe,CACxB5B,QAAS6B,IAAUC,QAGRG,O,wRC3Ef,MAAMc,UAAkB1F,IAAMC,UAC1BC,YAAYC,EAAOC,GACfC,MAAMF,GACNO,KAAKM,UAAYZ,EAAQuC,QAAQ3B,UACjC,IAAMgB,EAActB,KAAKP,MAAM6B,YAC/BtB,KAAKM,UAAUG,KAAKF,QAAQ0E,iBAAiBC,UACzC5D,EACA6D,OAAOC,SAASC,iBAGxBlD,SAAU,IAAD,EACkDnC,KAAKP,MAArD6F,EADF,EACEA,YAAaC,EADf,EACeA,aAAc9E,EAD7B,EAC6BA,KAAMa,EADnC,EACmCA,YAClCkE,EAAgBtF,IAAEC,OAAOM,EAAKwE,kBAAkB,GAChDQ,EAAavF,IAAEC,OAAOM,EAAKiF,kBAEzBC,EADUzF,IAAE0F,KAAKH,EAAarB,GAAcA,EAAUE,KAAK,KAAOhD,GACrC5E,MAA7BiJ,eACFE,EAAkBL,GAAiBA,EAAc9I,MAAMmJ,gBAAmB,IAC1EC,EAAqBN,GAAiBA,EAAc9I,MAAMoJ,mBAAsB,IACtF,MAAsB,MAAnBD,EACQ,KAGP,kBAAC,IAAD,CAAK3C,KAAM,EAAGZ,UAAU,aACpB,kBAAC,IAAD,CAAMA,UAAU,kBACZ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKY,KAAM,IAAX,mBACcyC,EAAiBxI,IAD/B,OAGA,kBAAC,IAAD,CAAK+F,KAAM,IAAX,OACS5B,GAET,kBAAC,IAAD,CAAK4B,KAAM,GAAX,cAGA,kBAAC,IAAD,CAAKA,KAAM,IACNzG,YAAgBoJ,IAErB,kBAAC,IAAD,CAAK3C,KAAM,GAAX,kBAGA,kBAAC,IAAD,CAAKA,KAAM,IACNzG,YAAgBqJ,IAErB,kBAAC,IAAD,CAAK5C,KAAM,GAAX,gBAGA,kBAAC,IAAD,CAAKA,KAAM,IAAX,OAIJ,kBAAC,IAAD,CAAK6C,QAAQ,iBACT,kBAAC,IAAD,CAAK7C,KAAM,GACP,kBAAC,IAAD,CAAQC,KAAK,UAAUb,UAAU,yBAAyBU,QAASsC,EAAavC,OAAK,GAArF,eAIJ,kBAAC,IAAD,CAAKG,KAAM,GACP,kBAAC,IAAD,CAAQC,KAAK,UAAUb,UAAU,0BAA0BU,QAASuC,EAAcxC,OAAK,GAAvF,WAIJ,kBAAC,IAAD,CAAKG,KAAM,GACP,kBAAC,IAAD,CACIH,OAAK,EACLI,KAAK,UACLb,UAAU,6BAHd,iBAqB5B0C,EAAUnB,aAAe,CACrB5B,QAAS6B,IAAUC,QAcRC,+BAAegB,GAX9B,SAAyB9C,GAAQ,IACzB8D,EAA4C9D,EAA5C8D,QAAS/B,EAAmC/B,EAAnC+B,SAAU3D,EAAyB4B,EAAzB5B,UAAWG,EAAcyB,EAAdzB,KAAMwF,EAAQ/D,EAAR+D,IAE5C,MAAO,CACHD,UACA/B,WACAxD,KAAK,2BAAMA,GAASH,EAAUG,MAC9BwF,IAAI,2BAAMA,GAAQ3F,EAAU2F,SCjDjBC,EA/CQzG,IAAW,IAAD,EACS0G,mBAAS,IADlB,mBACtB7E,EADsB,KACT8E,EADS,OAEKD,mBAAS,MAFd,mBAEtB/B,EAFsB,KAEXiC,EAFW,OAG+BF,oBAAS,GAHxC,mBAGtBG,EAHsB,KAGEC,EAHF,OAI+BJ,oBAAS,GAJxC,mBAItBK,EAJsB,KAIEC,EAJF,KAMvBC,EAAsB,KACxBD,GAA2BD,IAEzBG,EAAsB,KACxBJ,GAA2BD,IAEzBhB,EAAelG,IACjBgH,EAAehH,GACfsH,KAEEnB,EAAgBqB,IAClBP,EAAaO,GACbD,KAIEE,EADepH,EAAdgG,WACyBqB,IAAK1C,IAC1B,CAAC9C,YAAa8C,EAAUE,KAAK,MAGxC,OACI,kBAAC,IAAD,CAAMjC,MAAM,iBAAiBC,UAAU,iBACnC,kBAAC,IAAD,KACKuE,EAAaC,IAAI,CAACpJ,EAAWqJ,IACnB,kBAAC,EAAD,eAAWC,IAAKD,GAAWrJ,EAA3B,CAAsC4H,YAAaA,EAAaC,aAAcA,OAG7F,kBAAC,IAAD,CACIjE,YAAaA,EACbc,QAASoE,EACTnF,QAASqF,IAEb,kBAAC,IAAD,CACItC,UAAWA,EACXhC,QAASkE,EACTjF,QAASsF,MClCzB,MAAMM,UAAe3H,IAAMC,UACzBC,YAAYC,EAAOC,GACjBC,MAAMF,GADoB,KA0C5BmF,eAAiB,KACf5E,KAAKkH,QACFC,KAAK,4BAA6B,CACjCC,SAAUpH,KAAKqH,cAEhBC,KAAK,KACJhJ,IAAQiJ,QAAQ,yDAChBvH,KAAKwH,aAENC,MAAOhD,IACN5E,QAAQ6H,MAAMjD,MApDQ,KAwD5B+C,SAAW,KACTxH,KAAKmB,SAAS,CACZwG,OA9Dc,OA+DdC,SAAU,KAGZ5H,KAAK6H,SAAWC,YAAY,KAAO,IACzBF,EAAa5H,KAAKkC,MAAlB0F,SAER,GAAiB,IAAbA,EAKF,OAJA5H,KAAKmB,SAAS,CACZwG,OAtEY,gBAwEdI,cAAc/H,KAAK6H,UAGrB7H,KAAKmB,SAAS,CACZyG,SAAUA,EAAW,KAEtB,MA3EuB,KA8E5BI,aAAe,KACbhI,KAAKkH,QACFe,IADH,mCACmCjI,KAAKqH,cACrCC,KAAMY,IAAS,IACNC,EAAWD,EAAItB,KAAfuB,OADK,EAESnI,KAAKP,MAAnBgB,EAFK,EAELA,KAAMwF,EAFD,EAECA,IACNmC,EAAyB3H,EAAzB2H,qBACAC,EAA0BpC,EAA1BoC,sBAGNF,EAAOG,gBAAkBpI,IAAEC,OAAOiI,GAAsB,GAAG1L,OAC3DyL,EAAOI,iBAAmBrI,IAAEC,OAAOkI,GAAuB,GAAG3L,MAM/DsD,KAAKM,UAAU2F,IAAI1F,QAAQyH,aAAaxG,UAAU,KAAO2G,EAAOK,4BAJ9DlK,IAAQmK,KAAK,4CAMhBhB,MAAOhD,IACN5E,QAAQ6H,MAAMjD,MAlGQ,KAsG5BiE,cAAgB,KAAO,IAAD,EACS1I,KAAKkC,MAA1ByF,EADY,EACZA,OAAQC,EADI,EACJA,SAChB,OAAQD,GACN,IA9Gc,OA+GZ,MAAO,CACL,kBAAC,IAAD,CAAQxE,KAAK,UAAUH,QAAShD,KAAK4E,gBAArC,sBAIJ,IAnHc,OAoHZ,MAAO,CAAC,kBAAC,IAAD,CAAQ+D,UAAQ,GAAhB,0BAAyCf,EAAzC,kBACV,IApHgB,SAqHd,MAAO,CACL,kBAAC,IAAD,CAAQzE,KAAK,UAAUH,QAAShD,KAAKgI,cAArC,oBAnHoB,IAIxB/D,EAEExE,EAFFwE,SACW2E,EACTnJ,EADFuG,QAAW4C,QAEb5I,KAAKqH,YAAcpD,EAAS,GAC5BjE,KAAKM,UAAYZ,EAAQuC,QAAQ3B,UACjCN,KAAKkC,MAAQ,CACXyF,OAfc,QAkBhB3H,KAAKM,UAAU2F,IAAI1F,QAAQ8H,sBAAsBnD,UAAUlF,KAAKqH,aAChErH,KAAKM,UAAUG,KAAKF,QAAQ6H,qBAAqBlD,UAAUlF,KAAKqH,aAEhErH,KAAKkH,QAAU2B,IAAMC,OAAO,CAC1BC,QAASH,EAAQ1B,QACjB8B,QAAS,MAGXhJ,KAAKkH,QACFe,IADH,4BAC4BjI,KAAKqH,cAC9BC,KAAMY,IAAS,IACNC,EAAWD,EAAItB,KAAfuB,OACRnI,KAAKmB,SAAS,CACZ8H,aAAcd,EAAOG,cACrBY,cAAef,EAAOI,mBAGzBd,MAAOhD,IACN5E,QAAQ6H,MAAMjD,GAEVA,EAAI0E,SACN7K,IAAQoJ,MAAMjD,EAAI0E,SAASvC,KAAKc,OAIlCpJ,IAAQ8K,QAAQ,uEAoFtBjH,SAAU,IAAD,EACenC,KAAKP,MAAnBgB,EADD,EACCA,KAAMwF,EADP,EACOA,IADP,EAEiCjG,KAAKkC,MAArC+G,EAFD,EAECA,aAAcC,EAFf,EAEeA,cACdd,EAAyB3H,EAAzB2H,qBACAC,EAA0BpC,EAA1BoC,sBACF5C,EAAWvF,IAAEC,OAAOM,EAAKiF,kBAE/B,OAAIxF,IAAEmJ,QAAQhB,IAA0BnI,IAAEmJ,QAAQjB,GACzC,kBAAC,IAAD,MAIP,oCACE,kBAAC,IAAD,CAAM/F,MAAM,SAASiH,QAAStJ,KAAK0I,iBACjC,kBAAC,IAAD,CAAKrF,MAAO,CAAEO,UAAW,SACvB,kBAAC,IAAD,CAAKV,KAAM,IACT,kBAAC,IAAD,CACEb,MAAM,2BACN3F,MAAOD,YAAgBwM,GAAc,MAGzC,kBAAC,IAAD,CAAK/F,KAAM,IACT,kBAAC,IAAD,CACEb,MAAM,4BACN3F,MAAOD,YAAgByM,GAAe,MAG1C,kBAAC,IAAD,CAAKhG,KAAM,IACT,kBAAC,IAAD,CACEb,MAAM,yBACN3F,MAAOD,YAAgByD,IAAEC,OAAOiI,GAAsB,GAAG1L,OAAO,MAGpE,kBAAC,IAAD,CAAKwG,KAAM,IACT,kBAAC,IAAD,CACEb,MAAM,0BACN3F,MAAOD,YAAgByD,IAAEC,OAAOkI,GAAuB,GAAG3L,OAAO,QAKzE,kBAAC,EAAD,CAAe+I,WAAYA,MAUnCwB,EAAOpD,aAAe,CACpB5B,QAAS6B,IAAUC,QAcNC,mCAAeiD,GAX9B,SAAyB/E,GAAQ,IACvB8D,EAA4C9D,EAA5C8D,QAAS/B,EAAmC/B,EAAnC+B,SAAU3D,EAAyB4B,EAAzB5B,UAAWG,EAAcyB,EAAdzB,KAAMwF,EAAQ/D,EAAR+D,IAE5C,MAAO,CACLD,UACA/B,WACAxD,KAAK,2BAAMA,GAASH,EAAUG,MAC9BwF,IAAI,2BAAMA,GAAQ3F,EAAU2F","file":"static/js/11.397c16dd.chunk.js","sourcesContent":["import _ from 'lodash';\nimport web3 from 'web3';\n\nimport './network';\n\nexport const CELR = 'CELR';\n\nexport const getUnitByAddress = (supportedTokens, address) => {\n  const token = _.find(supportedTokens, (supportedToken) => supportedToken.address === address);\n\n  if (!token) {\n    return '';\n  }\n  return token.symbol;\n};\n\nexport const formatCurrencyValue = (value, unit, showDecimal) => {\n  if (!value) {\n    return;\n  }\n\n  if (showDecimal) {\n    return `${web3.utils.fromWei(value)} ${unit}`;\n  }\n\n  return `${web3.utils.fromWei(value).split('.')[0]} ${unit}`;\n};\n\nexport const formatCelrValue = (value, showDecimal) => {\n  return formatCurrencyValue(value, CELR, showDecimal);\n};\n","export const EMPTY_ADDRESS = '0x0000000000000000000000000000000000000000';\nexport const RATE_PRECISION = 2;\nexport const RATE_BASE = 10 ** RATE_PRECISION;\n","import { RATE_PRECISION, RATE_BASE } from './constant';\n\nexport const currencyFieldOptions = unit => ({\n    formatter: value => (value ? `${value}${unit}` : ''),\n    parser: value => value.replace(/[A-Z]/g, '')\n});\n\nexport const celrFieldOptions = currencyFieldOptions('CELR');\n\nexport const dayFieldOptions = {\n    formatter: value => (value ? `${value}day` : ''),\n    parser: value => value.replace(/[a-z]/g, '')\n};\n\nexport const blockFieldOptions = {\n    formatter: value => (value ? `${value}block` : ''),\n    parser: value => value.replace(/[a-z]/g, '')\n};\n\nexport const rateFieldOptions = {\n    formatter: value => (value ? `${value}%` : ''),\n    parser: value => value.replace(/[%]/g, '')\n};\n\nexport const minValueRule = minValue => ({\n    validator: (rule, value, callback) => {\n        if (value < minValue) {\n            const msg = `value is smaller than ${minValue}`;\n            callback(msg);\n        }\n\n        callback();\n    }\n});\n\nexport const commissionRateField = {\n    name: 'commissionRate',\n    label: 'Commission Rate',\n    field: 'number',\n    fieldOptions: {\n        ...rateFieldOptions,\n        placeholder: 'The commission rate',\n        step: 1 / RATE_BASE,\n        precision: RATE_PRECISION\n    },\n    rules: [\n        minValueRule(0),\n        {\n            message: 'Please enter a commission rate!',\n            required: true\n        }\n    ]\n};\n\nexport const rateLockEndTimeField = {\n    name: 'rateLockEndTime',\n    label: 'Rate Lock End Time',\n    fieldOptions: {\n        placeholder: 'The rate lock end time',\n        prefix: '+',\n        suffix: 'blocks'\n    },\n    rules: [\n        {\n            message: 'Please enter a rate lock end time!',\n            required: true\n        }\n    ]\n};\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 1165;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport web3 from 'web3';\nimport _ from 'lodash';\nimport { drizzleConnect } from '@drizzle/react-plugin';\nimport { Modal, Spin, Form, InputNumber, Button, Row, Col, Statistic } from 'antd';\n\n// import Form from '../form';\nimport { celrFieldOptions } from '../../utils/form';\nimport { formatCelrValue } from '../../utils/unit';\n\nimport \"./delegate-form.less\";\n\nclass DelegateForm extends React.Component {\n  constructor(props, context) {\n    super(props);\n\n    this.formRef = React.createRef();\n    this.contracts = context.drizzle.contracts;\n    this.state = { approving: false };\n  }\n\n  onFinish = (value) => {\n    console.log(value);\n    const { CELRToken } = this.props;\n    const celerAllowance = _.values(CELRToken.allowance)[0] || {};\n    const { stateNum } = value;\n    if (stateNum > web3.utils.fromWei(celerAllowance.value)) {\n      this.contracts.CELRToken.methods\n        .approve(\n          this.contracts.DPoS.address,\n          web3.utils.toWei(Number.MAX_SAFE_INTEGER.toString(), 'ether')\n        )\n        .send({})\n        .on('receipt', (receipt) => {\n          this.sendDelegate(stateNum);\n        });\n      this.setState({\n        approving: true\n      });\n    } else {\n      this.sendDelegate(stateNum);\n    }\n  }\n\n  sendDelegate = (value) => {\n    const { onClose, candidateId } = this.props;\n\n    this.contracts.DPoS.methods.delegate.cacheSend(\n      candidateId,\n      web3.utils.toWei(value.toString(), 'ether')\n    );\n\n    this.setState({\n      approving: false\n    });\n    onClose();\n  };\n\n  setMax = () => {\n    const { accountBalances, account } = this.props;\n    const maxValue = accountBalances[account];\n    this.formRef.current.setFieldsValue({stateNum: maxValue});\n  }\n\n  render() {\n    const { visible, onClose, accountBalances, account } = this.props;\n    const maxValue = accountBalances[account];\n    // const maxValue = \"200000000000000000000\";\n    console.log(maxValue, web3.utils.toWei(maxValue.toString(), 'ether'))\n\n    return (\n      <Modal title=\"Delegate\" className=\"delegate-form\" width=\"25rem\" visible={visible} onCancel={onClose} footer={null}>\n        <Spin spinning={this.state.approving} tip=\"Approving CELR token...\">\n          <Form ref={this.formRef} onFinish={this.onFinish} initialValues={{stateNum: 1}}>\n            <div className=\"btn-group\">\n              <Form.Item name=\"stateNum\" rules={[{\n                message: 'Please enter a value!',\n                required: true\n              }]}>\n                <InputNumber {...celrFieldOptions}/>\n              </Form.Item>\n              <Button block onClick={this.setMax}>\n                max\n              </Button>\n            </div>\n            <Row gutter={16} className=\"delegate-info\">\n              <Col span={12}>\n                <Statistic title=\"MIN Stake Amount\" value={1} />\n              </Col>\n              <Col span={12}>\n                <Statistic title=\"Available Amount\" value={formatCelrValue(maxValue)} />\n              </Col>\n            </Row>\n            <Form.Item>\n              <Button type=\"primary\" htmlType=\"submit\" block style={{backgroundColor: \"#2ED57B\", color: \"#000000\", border: \"1px solid #0AAD55\", height: \"3.625rem\", fontSize:\"1.125rem\", borderRadius:\"0.6rem\", marginTop: \"1.5rem\"}}>\n                Delegate\n              </Button>\n            </Form.Item>\n          </Form>\n        </Spin>\n      </Modal>\n    );\n  }\n}\n\nDelegateForm.propTypes = {\n  visible: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired\n};\n\nDelegateForm.contextTypes = {\n  drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n  const { contracts, accountBalances, accounts } = state;\n  return {\n    CELRToken: contracts.CELRToken,\n    accountBalances,\n    account: accounts[0],\n  };\n}\nexport default drizzleConnect(DelegateForm, mapStateToProps);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport web3 from 'web3';\nimport { Modal } from 'antd';\n\nimport Form from '../form';\nimport { celrFieldOptions } from '../../utils/form';\n\nclass WithdrawForm extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.form = React.createRef();\n        this.contracts = context.drizzle.contracts;\n    }\n\n    onSubmit = () => {\n        const { onClose, candidate } = this.props;\n        const candidateAddr = candidate.args[0];\n\n        this.form.current.validateFields((err, values) => {\n            if (err) {\n                return;\n            }\n\n            const { value } = values;\n\n            if (candidate.value.status === '0') {\n                this.contracts.DPoS.methods.withdrawFromUnbondedCandidate.cacheSend(\n                    candidateAddr,\n                    web3.utils.toWei(value.toString(), 'ether')\n                );\n            } else {\n                this.contracts.DPoS.methods.intendWithdraw.cacheSend(\n                    candidateAddr,\n                    web3.utils.toWei(value.toString(), 'ether')\n                );\n            }\n\n            onClose();\n        });\n    };\n\n    render() {\n        const { visible, onClose } = this.props;\n        const formItems = [\n            {\n                name: 'value',\n                field: 'number',\n                fieldOptions: {\n                    ...celrFieldOptions,\n                    placeholder: 'The amount of CELR to withdraw'\n                },\n                rules: [\n                    {\n                        message: 'Please enter a value!',\n                        required: true\n                    }\n                ]\n            }\n        ];\n\n        return (\n            <Modal\n                title=\"Withdraw Stake\"\n                visible={visible}\n                onOk={this.onSubmit}\n                onCancel={onClose}\n            >\n                <Form ref={this.form} items={formItems} />\n            </Modal>\n        );\n    }\n}\n\nWithdrawForm.propTypes = {\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n\nWithdrawForm.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nexport default WithdrawForm;\n","import React from \"react\";\nimport { Skeleton, Card, Statistic, Row, Col, Button, message } from 'antd';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { drizzleConnect } from '@drizzle/react-plugin';\nimport { RATE_BASE } from '../../utils/constant';\nimport { formatCelrValue } from \"../../utils/unit\";\nimport \"./myDelegations.less\";\n\nclass Validator extends React.Component {\n    constructor(props, context) {\n        super(props);\n        this.contracts = context.drizzle.contracts;\n        const candidateId = this.props.candidateId;\n        this.contracts.DPoS.methods.getDelegatorInfo.cacheCall(\n            candidateId,\n            window.ethereum.selectedAddress\n        );\n    }\n    render() {\n        const {stakeMethod, unBondMethod, DPoS, candidateId} = this.props;\n        const delegatorInfo = _.values(DPoS.getDelegatorInfo)[0];\n        const candidates = _.values(DPoS.getCandidateInfo);\n        const candidate = _.find(candidates, (candidate) => candidate.args[0] === candidateId);\n        const { commissionRate } = candidate.value;\n        const delegatedStake = (delegatorInfo && delegatorInfo.value.delegatedStake) || '0';\n        const undelegatingStake = (delegatorInfo && delegatorInfo.value.undelegatingStake) || '0';\n        if(delegatedStake === \"0\") {\n            return null;\n        }\n        return (\n            <Col span={8} className=\"block-col\">\n                <Card className=\"validator-card\">\n                    <Row>\n                        <Col span={12}>\n                            rate: {`${commissionRate / RATE_BASE} %`}\n                        </Col>\n                        <Col span={12}>\n                            id: {candidateId}\n                        </Col>\n                        <Col span={6}>\n                            Your Stake\n                        </Col>\n                        <Col span={18}>\n                            {formatCelrValue(delegatedStake)}\n                        </Col>\n                        <Col span={6}>\n                            Unbonded Stake\n                        </Col>\n                        <Col span={18}>\n                            {formatCelrValue(undelegatingStake)}\n                        </Col>\n                        <Col span={6}>\n                        Withdrawable\n                        </Col>\n                        <Col span={18}>\n                            --\n                        </Col>\n                    </Row>\n                    <Row justify=\"space-between\">\n                        <Col span={7}>\n                            <Button type=\"primary\" className=\"extra-button btn-stake\" onClick={stakeMethod} block>\n                                Stake More\n                            </Button>\n                        </Col>\n                        <Col span={7}>\n                            <Button type=\"primary\" className=\"extra-button btn-unbond\" onClick={unBondMethod} block>\n                                Unbond\n                            </Button>\n                        </Col>\n                        <Col span={8}>\n                            <Button\n                                block\n                                type=\"primary\"\n                                className=\"extra-button btn-withdraw\" \n                                // onClick={this.confirmWithdraw}\n                                // disabled={undelegatingStake === '0'}\n                            >\n                                withdraw\n                            </Button>\n                        </Col>\n                    </Row>\n                </Card>\n            </Col>\n        )\n    }\n}\n\nValidator.propTypes = {\n    dispatch: PropTypes.func.isRequired\n};\n\nValidator.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\nconst { network, accounts, contracts, DPoS, SGN } = state;\n\nreturn {\n    network,\n    accounts,\n    DPoS: { ...DPoS, ...contracts.DPoS },\n    SGN: { ...SGN, ...contracts.SGN }\n};\n}\n  \nexport default drizzleConnect(Validator, mapStateToProps);","import React, { useState } from \"react\";\nimport { Card, Row, } from 'antd';\nimport \"./myDelegations.less\";\nimport DelegateForm from '../candidate/delegate-form';\nimport WithdrawForm from '../candidate/withdraw-form';\nimport Validator from \"./validator\";\n\nconst MyDelegations = (props) => {\n    const [candidateId, setCandidateId] = useState(\"\");\n    const [candidate, setCandidate] = useState(null);\n    const [isWithdrawModalVisible, setIsWithdrawModalVisible] = useState(false);\n    const [isDelegateModalVisible, setIsDelegateModalVisible] = useState(false);\n\n    const toggleDelegateModal = () => {\n        setIsDelegateModalVisible(!isDelegateModalVisible);\n    }\n    const toggleWithdrawModal = () => {\n        setIsWithdrawModalVisible(!isWithdrawModalVisible);\n    }\n    const stakeMethod = (id) => {\n        setCandidateId(id);\n        toggleDelegateModal();\n    }\n    const unBondMethod = (data) => {\n        setCandidate(data);\n        toggleWithdrawModal();\n    }\n\n    const {candidates} = props;\n    const candidateIds = candidates.map((candidate) => {\n        return {candidateId: candidate.args[0]};\n    })\n\n    return (\n        <Card title=\"My Delegations\" className=\"myDelegations\">\n            <Row>\n                {candidateIds.map((validator, index) => {\n                    return <Validator key={index} {...validator} stakeMethod={stakeMethod} unBondMethod={unBondMethod}/>\n                })}\n            </Row>\n            <DelegateForm\n                candidateId={candidateId}\n                visible={isDelegateModalVisible}\n                onClose={toggleDelegateModal}\n            />\n            <WithdrawForm\n                candidate={candidate}\n                visible={isWithdrawModalVisible}\n                onClose={toggleWithdrawModal}\n            />\n        </Card>\n    )\n}\n\nexport default MyDelegations;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { drizzleConnect } from '@drizzle/react-plugin';\nimport { Skeleton, Card, Statistic, Row, Col, Button, message } from 'antd';\nimport axios from 'axios';\n\nimport { formatCelrValue } from '../utils/unit';\nimport MyDelegations from \"../components/reward/myDelegations\";\n\nconst INIT_ACTION = 'init';\nconst WAIT_ACTION = 'wait';\nconst REDEEM_ACTION = 'redeem';\n\nclass Reward extends React.Component {\n  constructor(props, context) {\n    super(props);\n\n    const {\n      accounts,\n      network: { setting }\n    } = props;\n    this.currentUser = accounts[0];\n    this.contracts = context.drizzle.contracts;\n    this.state = {\n      action: INIT_ACTION\n    };\n\n    this.contracts.SGN.methods.redeemedServiceReward.cacheCall(this.currentUser);\n    this.contracts.DPoS.methods.redeemedMiningReward.cacheCall(this.currentUser);\n\n    this.gateway = axios.create({\n      baseURL: setting.gateway,\n      timeout: 1000\n    });\n\n    this.gateway\n      .get(`/validator/reward/${this.currentUser}`)\n      .then((res) => {\n        const { result } = res.data;\n        this.setState({\n          miningReward: result.mining_reward,\n          serviceReward: result.service_reward\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n\n        if (err.response) {\n          message.error(err.response.data.error);\n          return;\n        }\n\n        message.warning('Please config gateway url in setting to load sgn reward correctly');\n      });\n  }\n\n  intendWithdraw = () => {\n    this.gateway\n      .post('/validator/withdrawReward', {\n        eth_addr: this.currentUser\n      })\n      .then(() => {\n        message.success('Success! Please wait a few seconds to trigger redeem.');\n        this.waitSigs();\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  };\n\n  waitSigs = () => {\n    this.setState({\n      action: WAIT_ACTION,\n      waitTime: 30\n    });\n\n    this.interval = setInterval(() => {\n      const { waitTime } = this.state;\n\n      if (waitTime === 0) {\n        this.setState({\n          action: REDEEM_ACTION\n        });\n        clearInterval(this.interval);\n        return;\n      }\n      this.setState({\n        waitTime: waitTime - 1\n      });\n    }, 1000);\n  };\n\n  redeemReward = () => {\n    this.gateway\n      .get(`/validator/rewardRequest/${this.currentUser}`)\n      .then((res) => {\n        const { result } = res.data;\n        const { DPoS, SGN } = this.props;\n        const { redeemedMiningReward } = DPoS;\n        const { redeemedServiceReward } = SGN;\n\n        if (\n          result.mining_reward === _.values(redeemedMiningReward)[0].value &&\n          result.service_reward === _.values(redeemedServiceReward)[0].value\n        ) {\n          message.warn('You do not have more reward to redeem.');\n          return;\n        }\n\n        this.contracts.SGN.methods.redeemReward.cacheSend('0x' + result.reward_request_proto_bytes);\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  };\n\n  renderActions = () => {\n    const { action, waitTime } = this.state;\n    switch (action) {\n      case INIT_ACTION:\n        return [\n          <Button type=\"primary\" onClick={this.intendWithdraw}>\n            Initialize Redeem\n          </Button>\n        ];\n      case WAIT_ACTION:\n        return [<Button disabled>Collecting signatures. {waitTime} seconds left</Button>];\n      case REDEEM_ACTION:\n        return [\n          <Button type=\"primary\" onClick={this.redeemReward}>\n            Redeem Reward\n          </Button>\n        ];\n    }\n  };\n\n  render() {\n    const { DPoS, SGN } = this.props;\n    const { miningReward, serviceReward } = this.state;\n    const { redeemedMiningReward } = DPoS;\n    const { redeemedServiceReward } = SGN;\n    const candidates=_.values(DPoS.getCandidateInfo);\n\n    if (_.isEmpty(redeemedServiceReward) || _.isEmpty(redeemedMiningReward)) {\n      return <Skeleton />;\n    }\n\n    return (\n      <>\n        <Card title=\"Reward\" actions={this.renderActions()}>\n          <Row style={{ marginTop: '10px' }}>\n            <Col span={12}>\n              <Statistic\n                title=\"Cumulative Mining Reward\"\n                value={formatCelrValue(miningReward, true)}\n              />\n            </Col>\n            <Col span={12}>\n              <Statistic\n                title=\"Cumulative Service Reward\"\n                value={formatCelrValue(serviceReward, true)}\n              />\n            </Col>\n            <Col span={12}>\n              <Statistic\n                title=\"Redeemed Mining Reward\"\n                value={formatCelrValue(_.values(redeemedMiningReward)[0].value, true)}\n              />\n            </Col>\n            <Col span={12}>\n              <Statistic\n                title=\"Redeemed Service Reward\"\n                value={formatCelrValue(_.values(redeemedServiceReward)[0].value, true)}\n              />\n            </Col>\n          </Row>\n        </Card>\n        <MyDelegations candidates={candidates}/>\n      </>\n    );\n  }\n}\n\nReward.propTypes = {\n  dispatch: PropTypes.func.isRequired\n};\n\nReward.contextTypes = {\n  drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n  const { network, accounts, contracts, DPoS, SGN } = state;\n\n  return {\n    network,\n    accounts,\n    DPoS: { ...DPoS, ...contracts.DPoS },\n    SGN: { ...SGN, ...contracts.SGN }\n  };\n}\n\nexport default drizzleConnect(Reward, mapStateToProps);\n"],"sourceRoot":""}