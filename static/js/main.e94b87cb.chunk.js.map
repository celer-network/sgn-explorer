{"version":3,"sources":["utils/network.js","utils/contracts.js","components/form.js","components/select.js","models/celr-token.js","models/dpos.js","models/sgn.js","models/network.js","index.js","components/setting.js","utils/subscribe.js","App.js","router.js"],"names":["networkConfigs","localNetworkConfig","getNetworkConfig","networkID","networkConfig","checkNetworkCompatibility","a","window","ethereum","chainId","request","method","chainIdRaw","String","parseInt","requiredId","process","requiredName","Modal","error","title","content","contractOptions","web3","block","fallback","type","url","contracts","DPoS","SGN","CELRToken","polls","accounts","blocks","FormItem","Form","Item","buttonLayout","wrapperCol","sm","span","offset","xs","FIELD_MAP","date","DatePicker","input","Input","number","InputNumber","text","TextArea","select","Select","CustomizeForm","React","Component","handleSubmit","e","this","props","form","onSubmit","preventDefault","validateFields","err","values","renderFormItems","formItemLayout","items","getFieldDecorator","_","map","item","field","fieldOptions","initialValue","label","name","rules","Field","decoratorOptions","getValueFromEvent","args","fileList","target","checked","value","capitalize","render","submitText","noop","htmlType","defaultProps","labelCol","create","onValuesChange","changedValues","Option","allowClear","disabled","optionFilterProp","placeholder","state","undefined","onChange","setState","getValue","defaultValue","renderOptions","options","omit","isNil","showSearch","namespace","effects","reducers","save","action","payload","SETTING_KEY","setting","JSON","parse","localStorage","getItem","gateway","location","protocol","hostname","saveSetting","put","setItem","stringify","rootSaga","all","drizzleSagas","saga","fork","app","dva","initialState","generateContractsInitialState","extraReducers","drizzleReducers","onError","resp","message","msg","srv","use","createLoading","model","CELRModel","DPoSModel","SGNModel","NetworkModel","router","require","default","then","compatible","start","_store","runSaga","SettingForm","constructor","context","super","onClose","dispatch","current","console","log","createRef","drizzle","visible","network","formItems","required","placement","width","ref","contextTypes","PropTypes","object","drizzleConnect","getCelrAllowance","account","methods","allowance","cacheCall","address","Sider","Layout","Content","Footer","App","toggleSetting","prevState","showSetting","componentWillMount","events","InitializeCandidate","fromBlock","event","candidate","returnValues","getCandidateInfo","Approval","filter","owner","spender","subscribeEvent","blockNumber","currentProvider","selectedAddress","setInterval","reload","eth","getBlock","subscribeChainInfo","networkVersion","children","pathname","theme","mode","selectedKeys","slice","to","href","LinkOutlined","className","icon","onClick","style","textAlign","withRouter","ConnectedRouter","routerRedux","LoadingWrapper","LoadingContainer","redirectToHome","RouterConfig","history","Dynamic","component","Candidate","Govern","Reward","ContractReader","store","exact","path"],"mappings":"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","file":"static/js/main.e94b87cb.chunk.js","sourcesContent":["import { Modal } from 'antd';\n\nconst MAINNET = '1';\nconst ROPSTEN = '3';\n\nconst networkConfigs = {};\n\nconst localNetworkConfig = {};\n\nexport const getNetworkConfig = (networkID) => {\n  let networkConfig = localNetworkConfig;\n  if (networkConfigs[networkID]) {\n    networkConfig = networkConfigs[networkID];\n  }\n\n  return networkConfig;\n};\n\nexport const checkNetworkCompatibility = async () => {\n  if (process.env.NODE_ENV === 'development') {\n    return true;\n  }\n  if (!window.ethereum) {\n    return false;\n  }\n  const chainIdRaw =\n    window.ethereum.chainId || (await window.ethereum.request({ method: 'eth_chainId' }));\n  const chainId = String(parseInt(chainIdRaw));\n  const requiredId = process.env.REACT_APP_NETWORK_ID;\n  let requiredName;\n  switch (requiredId) {\n    case ROPSTEN:\n      requiredName = 'ropsten';\n      break;\n    case MAINNET:\n      requiredName = 'mainnet';\n      break;\n    default:\n      requiredName = 'unknown';\n  }\n  if (chainId !== requiredId) {\n    Modal.error({\n      title: `Current network ID ${chainId} is not supported`,\n      content: `Please switch to ${requiredName}`\n    });\n    return false;\n  }\n  return true;\n};\n","import DPoS from './../contracts/DPoS.json';\nimport SGN from './../contracts/SGN.json';\nimport CELRToken from './../contracts/CELRToken.json';\n\n// let drizzle know what contracts we want\nconst contractOptions = {\n    web3: {\n        block: false,\n        fallback: {\n            type: 'ws',\n            url: 'ws://localhost:8545'\n        }\n    },\n    contracts: [DPoS, SGN, CELRToken],\n    polls: {\n        accounts: 1000,\n        blocks: 1000\n    }\n};\n\nexport default contractOptions;\n","import React from 'react';\nimport _ from 'lodash';\nimport { Button, DatePicker, Form, Input, InputNumber } from 'antd';\n\nimport Select from './select';\n\nconst FormItem = Form.Item;\n\nconst defaultFormItemLayout = {\n  labelCol: {\n    sm: { span: 8 },\n    xs: { span: 24 }\n  },\n\n  wrapperCol: {\n    sm: { span: 16 },\n    xs: { span: 24 }\n  }\n};\n\nconst buttonLayout = {\n  wrapperCol: {\n    sm: { span: 3, offset: 21 },\n    xs: { span: 24 }\n  }\n};\n\nconst FIELD_MAP = {\n  date: DatePicker,\n  input: Input,\n  number: InputNumber,\n  text: Input.TextArea,\n  select: Select\n};\n\nclass CustomizeForm extends React.Component {\n  handleSubmit = e => {\n    const { form, onSubmit } = this.props;\n    e.preventDefault();\n    form.validateFields((err, values) => {\n      if (!err) {\n        onSubmit(values);\n      }\n    });\n  };\n\n  renderFormItems = () => {\n    const { form, formItemLayout, items } = this.props;\n    const { getFieldDecorator } = form;\n\n    return _.map(items, item => {\n      const {\n        field = 'input',\n        fieldOptions,\n        initialValue,\n        label,\n        name,\n        rules\n      } = item;\n      const Field = FIELD_MAP[field];\n      const decoratorOptions = {\n        initialValue,\n        rules,\n        getValueFromEvent(...args) {\n          if (field === 'file') {\n            return args[0].fileList;\n          }\n\n          const [e] = args;\n          if (!e || !e.target) {\n            return e;\n          }\n\n          const { target } = e;\n          return target.type === 'checkbox' ? target.checked : target.value;\n        }\n      };\n\n      return (\n        <FormItem\n          key={name}\n          {...formItemLayout}\n          label={!label ? _.capitalize(name) : label}\n        >\n          {getFieldDecorator(\n            name,\n            decoratorOptions\n          )(<Field {...fieldOptions} />)}\n        </FormItem>\n      );\n    });\n  };\n\n  render() {\n    const { onSubmit, submitText } = this.props;\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        {this.renderFormItems()}\n        {onSubmit !== _.noop && (\n          <FormItem {...buttonLayout}>\n            <Button htmlType=\"submit\" type=\"primary\">\n              {submitText}\n            </Button>\n          </FormItem>\n        )}\n      </Form>\n    );\n  }\n}\n\nCustomizeForm.defaultProps = {\n  formItemLayout: defaultFormItemLayout,\n  onSubmit: _.noop,\n  submitText: 'Save'\n};\n\nexport default Form.create({\n  onValuesChange(props, changedValues) {\n    if (props.onValuesChange) {\n      props.onValuesChange(changedValues);\n    }\n  }\n})(CustomizeForm);\n","import React from 'react';\nimport { Select } from 'antd';\nimport _ from 'lodash';\n\nconst Option = Select.Option;\n\nexport default class extends React.Component {\n    defaultProps = {\n        allowClear: true,\n        disabled: false,\n        optionFilterProp: 'children',\n        placeholder: ''\n    };\n\n    state = { value: undefined };\n\n    onChange = (value: ValueType) => this.setState({ value });\n\n    getValue = () => {\n        const { defaultValue } = this.props;\n        const { value } = this.state;\n        return value || defaultValue;\n    };\n\n    renderOptions = () => {\n        const { options } = this.props;\n        return _.map(options, ([value, text]) => (\n            <Option key={value} value={value}>\n                {text}\n            </Option>\n        ));\n    };\n\n    render() {\n        const { defaultValue } = this.props;\n        const props = {\n            ..._.omit(this.props, ['options', 'defaultValue'])\n        };\n\n        if (!props.onChange) {\n            props.onChange = this.onChange;\n        }\n        if (!_.isNil(defaultValue)) {\n            props.defaultValue = defaultValue;\n        }\n\n        return (\n            <Select {...props} showSearch={true}>\n                {this.renderOptions()}\n            </Select>\n        );\n    }\n}\n","export default {\n    namespace: 'CELRToken',\n\n    state: {},\n\n    effects: {},\n\n    reducers: {\n        save(state, action) {\n            return { ...state, ...action.payload };\n        }\n    }\n};\n","export default {\n    namespace: 'DPoS',\n\n    state: {},\n\n    effects: {},\n\n    reducers: {\n        save(state, action) {\n            return { ...state, ...action.payload };\n        }\n    }\n};\n","export default {\n    namespace: 'SGN',\n\n    state: {},\n\n    effects: {},\n\n    reducers: {\n        save(state, action) {\n            return { ...state, ...action.payload };\n        }\n    }\n};\n","const SETTING_KEY = 'setting';\n\nexport default {\n  namespace: 'network',\n\n  state: {\n    setting: JSON.parse(localStorage.getItem(SETTING_KEY)) || {\n      gateway: `${window.location.protocol}//${window.location.hostname}/gateway`\n    }\n  },\n\n  effects: {\n    *saveSetting({ payload }, { put }) {\n      const { setting } = payload;\n      localStorage.setItem(SETTING_KEY, JSON.stringify(setting));\n\n      yield put({ payload, type: 'save' });\n    }\n  },\n\n  reducers: {\n    save(state, action) {\n      return { ...state, ...action.payload };\n    }\n  }\n};\n","import dva from 'dva';\nimport createLoading from 'dva-loading';\nimport { all, fork } from 'redux-saga/effects';\nimport { generateContractsInitialState, drizzleReducers, drizzleSagas } from '@drizzle/store';\nimport { message } from 'antd';\n\nimport contractOptions from './utils/contracts';\nimport { checkNetworkCompatibility } from './utils/network';\nimport CELRModel from './models/celr-token';\nimport DPoSModel from './models/dpos';\nimport SGNModel from './models/sgn';\nimport NetworkModel from './models/network';\n\nfunction* rootSaga() {\n  yield all(drizzleSagas.map((saga) => fork(saga)));\n}\n\n// 1. Initialize\nconst app = dva({\n  initialState: {\n    ...generateContractsInitialState(contractOptions)\n  },\n  extraReducers: {\n    ...drizzleReducers\n  },\n  onError(err) {\n    if (err.resp) {\n      message.error(err.resp.msg);\n    } else if (err.srv) {\n      message.error(err.srv.msg);\n    } else {\n      message.error(err);\n    }\n  }\n});\n\n// 2. Plugins\napp.use(\n  createLoading({\n    namespace: 'loading'\n    // effects: enable effects level loading state\n  })\n);\n\n// 3. Model\n// Moved to router.js\napp.model(CELRModel);\napp.model(DPoSModel);\napp.model(SGNModel);\napp.model(NetworkModel);\n\n// 4. Router\napp.router(require('./router.js').default);\n\n// 5. Start\ncheckNetworkCompatibility().then((compatible) => {\n  if (compatible) {\n    app.start('#root');\n    app._store.runSaga(rootSaga);\n  }\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Drawer } from 'antd';\nimport { drizzleConnect } from '@drizzle/react-plugin';\n\nimport Form from './form';\n\nclass SettingForm extends React.Component {\n  constructor(props, context) {\n    super(props);\n\n    this.state = {};\n    this.form = React.createRef();\n    this.contracts = context.drizzle.contracts;\n  }\n\n  handleSubmit = () => {\n    const { onClose, dispatch } = this.props;\n\n    this.form.current.validateFields((err, values) => {\n      if (err) {\n        console.log(err);\n        return;\n      }\n\n      dispatch({\n        type: 'network/saveSetting',\n        payload: { setting: values }\n      });\n\n      onClose();\n    });\n  };\n\n  render() {\n    const {\n      visible,\n      onClose,\n      network: { setting = {} }\n    } = this.props;\n\n    const formItems = [\n      {\n        name: 'gateway',\n        initialValue: setting.gateway,\n        fieldOptions: {\n          placeholder: 'The gateway URL'\n        },\n        rules: [\n          {\n            message: 'Please enter gateway URL!',\n            required: true\n          }\n        ]\n      }\n    ];\n\n    return (\n      <Drawer title=\"Setting\" placement=\"right\" width=\"500\" onClose={onClose} visible={visible}>\n        <Form ref={this.form} items={formItems} onSubmit={this.handleSubmit} />\n      </Drawer>\n    );\n  }\n}\n\nSettingForm.propTypes = {\n  visible: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired\n};\n\nSettingForm.contextTypes = {\n  drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n  const { network } = state;\n\n  return {\n    network\n  };\n}\n\nexport default drizzleConnect(SettingForm, mapStateToProps);\n","const POLL_INTERVAL = 1000;\n\nexport const subscribeEvent = (account, contracts, dispatch) => {\n  const { DPoS, CELRToken } = contracts;\n\n  DPoS.events.InitializeCandidate(\n    {\n      fromBlock: 0\n    },\n    (err, event) => {\n      if (err) {\n        console.log(err);\n        return;\n      }\n\n      const { candidate } = event.returnValues;\n      DPoS.methods.getCandidateInfo.cacheCall(candidate);\n    }\n  );\n\n  CELRToken.events.Approval(\n    {\n      filter: {\n        owner: account,\n        spender: DPoS.address\n      }\n    },\n    (err, event) => {\n      if (err) {\n        return;\n      }\n\n      getCelrAllowance(account, contracts);\n    }\n  );\n\n  getCelrAllowance(account, contracts);\n};\n\nexport const subscribeChainInfo = (web3, dispatch) => {\n  const account = web3.currentProvider.selectedAddress;\n  let blockNumber;\n\n  setInterval(() => {\n    if (account !== web3.currentProvider.selectedAddress) {\n      window.location.reload();\n    }\n\n    return web3.eth.getBlock('latest').then((block) => {\n      if (block && blockNumber !== block.number) {\n        dispatch({\n          type: 'network/save',\n          payload: { block }\n        });\n        blockNumber = block.number;\n      }\n    });\n  }, POLL_INTERVAL);\n};\n\nconst getCelrAllowance = (account, contracts) => {\n  const { CELRToken, DPoS } = contracts;\n  CELRToken.methods.allowance.cacheCall(account, DPoS.address);\n};\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { drizzleConnect } from '@drizzle/react-plugin';\nimport { withRouter, Link } from 'dva/router';\nimport { Layout, Menu, Button } from 'antd';\nimport { LinkOutlined } from '@ant-design/icons';\n\nimport Setting from './components/setting';\nimport { subscribeEvent, subscribeChainInfo } from './utils/subscribe';\nimport { getNetworkConfig } from './utils/network';\n\nimport './App.css';\n\nconst { Sider, Content, Footer } = Layout;\n\nclass App extends React.Component {\n  constructor(props, context) {\n    super(props);\n\n    this.state = { showSetting: false };\n    this.contracts = context.drizzle.contracts;\n    this.web3 = context.drizzle.web3;\n  }\n\n  componentWillMount() {\n    const { accounts, dispatch } = this.props;\n    subscribeEvent(accounts[0], this.contracts, dispatch);\n    subscribeChainInfo(this.web3, dispatch);\n\n    dispatch({\n      type: 'network/save',\n      payload: getNetworkConfig(this.web3.currentProvider.networkVersion)\n    });\n  }\n\n  toggleSetting = () => {\n    this.setState((prevState) => ({\n      showSetting: !prevState.showSetting\n    }));\n  };\n\n  render() {\n    const { showSetting } = this.state;\n    const { children, location } = this.props;\n    const { pathname } = location;\n\n    return (\n      <Layout>\n        <Sider width={220}>\n          <Menu theme=\"dark\" mode=\"inline\" selectedKeys={[pathname.slice(1)]}>\n            <Menu.Item key=\"dpos\">\n              <Link to=\"/dpos\">Validators</Link>\n            </Menu.Item>\n            {/* <Menu.Item key=\"govern\">\n                <Link to=\"/govern\">Govern</Link>\n            </Menu.Item> */}\n            <Menu.Item key=\"reward\">\n              <Link to=\"/reward\">Reward</Link>\n            </Menu.Item>\n            <Menu.Item key=\"contract-reader\">\n              <Link to=\"/contract-reader\">Contract Reader</Link>\n            </Menu.Item>\n            <Menu.Item>\n              <a\n                href=\"https://github.com/celer-network/sgn-networks/blob/master/docs/delegator.md\"\n                target=\"_blank\"\n              >\n                <LinkOutlined />\n                Delegator Instructions\n              </a>\n            </Menu.Item>\n            <Menu.Item>\n              <a href=\"https://github.com/celer-network/sgn-networks\" target=\"_blank\">\n                <LinkOutlined />\n                Network Configurations\n              </a>\n            </Menu.Item>\n            <div className=\"setting\">\n              <Button type=\"primary\" icon=\"setting\" title=\"Setting\" onClick={this.toggleSetting} />\n              <Setting visible={showSetting} onClose={this.toggleSetting} />\n            </div>\n          </Menu>\n        </Sider>\n        <Layout>\n          <Content>{children}</Content>\n          <Footer style={{ textAlign: 'center' }}>SGN © 2019-2020 Celer Network</Footer>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nApp.propTypes = {\n  children: PropTypes.element.isRequired,\n  location: PropTypes.object.isRequired\n};\n\nApp.contextTypes = {\n  drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n  const { accounts, contracts } = state;\n\n  return {\n    accounts,\n    CELRToken: contracts.CELRToken\n  };\n}\n\nexport default withRouter(drizzleConnect(App, mapStateToProps));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter, routerRedux, Switch, Route, Redirect } from 'dva/router';\nimport Dynamic from 'dva/dynamic';\nimport { DrizzleProvider } from '@drizzle/react-plugin';\nimport { LoadingContainer } from '@drizzle/react-components';\n\nimport App from './App';\nimport contractOptions from './utils/contracts';\n\nconst { ConnectedRouter } = routerRedux;\nconst LoadingWrapper = withRouter(LoadingContainer);\n\nconst redirectToHome = () => <Redirect to=\"/dpos\" />;\n\nfunction RouterConfig({ history, app }) {\n  const DPoS = Dynamic({\n    app,\n    component: () => import('./routes/dpos')\n  });\n  const Candidate = Dynamic({\n    app,\n    component: () => import('./routes/candidate')\n  });\n  const Govern = Dynamic({\n    app,\n    component: () => import('./routes/govern')\n  });\n  const Reward = Dynamic({\n    app,\n    component: () => import('./routes/reward')\n  });\n  const ContractReader = Dynamic({\n    app,\n    component: () => import('./routes/contract-reader')\n  });\n\n  return (\n    <DrizzleProvider options={contractOptions} store={app._store}>\n      <ConnectedRouter history={history}>\n        <LoadingWrapper>\n          <App>\n            <Switch>\n              <Route exact path=\"/dpos\" component={DPoS} />\n              <Route exact path=\"/govern\" component={Govern} />\n              <Route exact path=\"/reward\" component={Reward} />\n              <Route exact path=\"/contract-reader\" component={ContractReader} />\n              <Route exact path=\"/candidate/:id\" component={Candidate} />\n              <Route exact path=\"/\" render={redirectToHome} />\n            </Switch>\n          </App>\n        </LoadingWrapper>\n      </ConnectedRouter>\n    </DrizzleProvider>\n  );\n}\n\nRouterConfig.propTypes = {\n  history: PropTypes.object.isRequired\n};\n\nexport default RouterConfig;\n"],"sourceRoot":""}