{"version":3,"sources":["routes/reward.js"],"names":["INIT_ACTION","WAIT_ACTION","REDEEM_ACTION","Reward","React","Component","constructor","props","context","super","intendWithdraw","this","gateway","post","eth_addr","currentUser","then","message","success","waitSigs","catch","err","console","error","setState","action","waitTime","interval","setInterval","state","clearInterval","redeemReward","get","res","result","data","DPoS","SGN","redeemedMiningReward","redeemedServiceReward","mining_reward","_","values","value","service_reward","contracts","methods","cacheSend","reward_request_proto_bytes","warn","renderActions","type","onClick","disabled","accounts","setting","network","drizzle","cacheCall","axios","create","baseURL","timeout","miningReward","serviceReward","response","warning","render","isEmpty","title","actions","style","marginTop","span","formatCelrValue","contextTypes","PropTypes","object","drizzleConnect"],"mappings":"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","file":"static/js/11.ce49a8cf.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { drizzleConnect } from '@drizzle/react-plugin';\nimport { Skeleton, Card, Statistic, Row, Col, Button, message } from 'antd';\nimport axios from 'axios';\n\nimport { formatCelrValue } from '../utils/unit';\n\nconst INIT_ACTION = 'init';\nconst WAIT_ACTION = 'wait';\nconst REDEEM_ACTION = 'redeem';\n\nclass Reward extends React.Component {\n  constructor(props, context) {\n    super(props);\n\n    const {\n      accounts,\n      network: { setting }\n    } = props;\n    this.currentUser = accounts[0];\n    this.contracts = context.drizzle.contracts;\n    this.state = {\n      action: INIT_ACTION\n    };\n\n    this.contracts.SGN.methods.redeemedServiceReward.cacheCall(this.currentUser);\n    this.contracts.DPoS.methods.redeemedMiningReward.cacheCall(this.currentUser);\n\n    this.gateway = axios.create({\n      baseURL: setting.gateway,\n      timeout: 1000\n    });\n\n    this.gateway\n      .get(`/validator/reward/${this.currentUser}`)\n      .then((res) => {\n        const { result } = res.data;\n        this.setState({\n          miningReward: result.mining_reward,\n          serviceReward: result.service_reward\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n\n        if (err.response) {\n          message.error(err.response.data.error);\n          return;\n        }\n\n        message.warning('Please config gateway url in setting to load sgn reward correctly');\n      });\n  }\n\n  intendWithdraw = () => {\n    this.gateway\n      .post('/validator/withdrawReward', {\n        eth_addr: this.currentUser\n      })\n      .then(() => {\n        message.success('Success! Please wait a few seconds to trigger redeem.');\n        this.waitSigs();\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  };\n\n  waitSigs = () => {\n    this.setState({\n      action: WAIT_ACTION,\n      waitTime: 30\n    });\n\n    this.interval = setInterval(() => {\n      const { waitTime } = this.state;\n\n      if (waitTime === 0) {\n        this.setState({\n          action: REDEEM_ACTION\n        });\n        clearInterval(this.interval);\n        return;\n      }\n      this.setState({\n        waitTime: waitTime - 1\n      });\n    }, 1000);\n  };\n\n  redeemReward = () => {\n    this.gateway\n      .get(`/validator/rewardRequest/${this.currentUser}`)\n      .then((res) => {\n        const { result } = res.data;\n        const { DPoS, SGN } = this.props;\n        const { redeemedMiningReward } = DPoS;\n        const { redeemedServiceReward } = SGN;\n\n        if (\n          result.mining_reward === _.values(redeemedMiningReward)[0].value &&\n          result.service_reward === _.values(redeemedServiceReward)[0].value\n        ) {\n          message.warn('You do not have more reward to redeem.');\n          return;\n        }\n\n        this.contracts.SGN.methods.redeemReward.cacheSend('0x' + result.reward_request_proto_bytes);\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  };\n\n  renderActions = () => {\n    const { action, waitTime } = this.state;\n    switch (action) {\n      case INIT_ACTION:\n        return [\n          <Button type=\"primary\" onClick={this.intendWithdraw}>\n            Initialize Redeem\n          </Button>\n        ];\n      case WAIT_ACTION:\n        return [<Button disabled>Collecting signatures. {waitTime} seconds left</Button>];\n      case REDEEM_ACTION:\n        return [\n          <Button type=\"primary\" onClick={this.redeemReward}>\n            Redeem Reward\n          </Button>\n        ];\n    }\n  };\n\n  render() {\n    const { DPoS, SGN } = this.props;\n    const { miningReward, serviceReward } = this.state;\n    const { redeemedMiningReward } = DPoS;\n    const { redeemedServiceReward } = SGN;\n\n    if (_.isEmpty(redeemedServiceReward) || _.isEmpty(redeemedMiningReward)) {\n      return <Skeleton />;\n    }\n\n    return (\n      <Card title=\"Reward\" actions={this.renderActions()}>\n        <Row style={{ marginTop: '10px' }}>\n          <Col span={12}>\n            <Statistic\n              title=\"Cumulative Mining Reward\"\n              value={formatCelrValue(miningReward, true)}\n            />\n          </Col>\n          <Col span={12}>\n            <Statistic\n              title=\"Cumulative Service Reward\"\n              value={formatCelrValue(serviceReward, true)}\n            />\n          </Col>\n          <Col span={12}>\n            <Statistic\n              title=\"Redeemed Mining Reward\"\n              value={formatCelrValue(_.values(redeemedMiningReward)[0].value, true)}\n            />\n          </Col>\n          <Col span={12}>\n            <Statistic\n              title=\"Redeemed Service Reward\"\n              value={formatCelrValue(_.values(redeemedServiceReward)[0].value, true)}\n            />\n          </Col>\n        </Row>\n      </Card>\n    );\n  }\n}\n\nReward.propTypes = {\n  dispatch: PropTypes.func.isRequired\n};\n\nReward.contextTypes = {\n  drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n  const { network, accounts, contracts, DPoS, SGN } = state;\n\n  return {\n    network,\n    accounts,\n    DPoS: { ...DPoS, ...contracts.DPoS },\n    SGN: { ...SGN, ...contracts.SGN }\n  };\n}\n\nexport default drizzleConnect(Reward, mapStateToProps);\n"],"sourceRoot":""}